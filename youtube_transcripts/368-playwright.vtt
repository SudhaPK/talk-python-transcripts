WEBVTT

00:00:00.000 --> 00:00:03.080
- Hello, YouTube.


00:00:03.080 --> 00:00:04.400
Hello, Andy.


00:00:04.400 --> 00:00:05.760
- Hey, what's going on?


00:00:05.760 --> 00:00:07.720
- Man, it's great to catch up with you.


00:00:07.720 --> 00:00:09.600
- Oh, thank you, you as well.


00:00:09.600 --> 00:00:11.040
- Yeah, it's been a while.


00:00:11.040 --> 00:00:13.400
Actually, the last time that we got to meet up,


00:00:13.400 --> 00:00:16.560
we were chilling at the Pie Bay, right?


00:00:16.560 --> 00:00:18.000
Pretty far from both of our places,


00:00:18.000 --> 00:00:20.600
but what a cool place to meet,


00:00:20.600 --> 00:00:25.040
outside at a food cart conference in San Francisco.


00:00:25.040 --> 00:00:27.160
- That was one of the best days of 2021.


00:00:27.160 --> 00:00:28.360
It was incredible.


00:00:28.360 --> 00:00:29.200
- It really was.


00:00:29.200 --> 00:00:32.620
And I gotta tell you, I think more conferences


00:00:32.620 --> 00:00:35.200
should follow this style.


00:00:35.200 --> 00:00:38.340
I know if you got a conference in Minnesota in the winter,


00:00:38.340 --> 00:00:39.800
like you probably can't have it outside,


00:00:39.800 --> 00:00:43.280
but boy, what a neat way to have a conference


00:00:43.280 --> 00:00:46.460
in the age of COVID where people felt comfortable.


00:00:46.460 --> 00:00:48.240
And I think honestly, forget COVID,


00:00:48.240 --> 00:00:49.740
I would have loved to go to this regardless,


00:00:49.740 --> 00:00:52.500
but it just works even better because of it.


00:00:52.500 --> 00:00:53.920
- Oh yeah, I'm looking forward


00:00:53.920 --> 00:00:56.340
to going back this year in September.


00:00:56.340 --> 00:00:57.520
- Oh yeah, it's gonna be epic.


00:00:57.520 --> 00:01:00.840
Okay, anyway, that was really great to meet you there.


00:01:00.840 --> 00:01:05.220
And now we're here to talk about testing.


00:01:05.220 --> 00:01:08.180
It's really, you know, what a surprise


00:01:08.180 --> 00:01:11.300
that you're on the show to talk testing in Python.


00:01:11.300 --> 00:01:14.720
- Who would have thought of all people.


00:01:14.720 --> 00:01:19.720
- Yeah, people may know you from your automation panda work


00:01:19.720 --> 00:01:21.260
and blog and stuff like that, right?


00:01:21.260 --> 00:01:25.020
So, you know, let's get started with your story.


00:01:25.020 --> 00:01:26.280
How do you get in programming Python?


00:01:26.280 --> 00:01:29.320
Maybe just kick it off by talking about Automation Panda.


00:01:29.320 --> 00:01:31.760
It's maybe a good place to set the stage.


00:01:31.760 --> 00:01:34.120
- Sure, so I'll start with how Python,


00:01:34.120 --> 00:01:36.480
then I'll talk about why Automation Panda.


00:01:36.480 --> 00:01:39.280
So I first started programming Python in high school.


00:01:39.280 --> 00:01:42.920
This was around 2005,


00:01:42.920 --> 00:01:47.640
I think Python 2.3 was the new version.


00:01:47.640 --> 00:01:50.560
I was taking a survey of programming languages course,


00:01:50.560 --> 00:01:51.640
and we did a whole bunch of things,


00:01:51.640 --> 00:01:53.080
and the instructor really liked Python.


00:01:53.080 --> 00:01:54.600
So I picked it up a little bit,


00:01:54.600 --> 00:02:00.720
do much other than toy around. Then I didn't do anything with Python until about 2015 when


00:02:00.720 --> 00:02:07.200
I joined a new company in my area called MaxPoint. And their three languages were Java, C#, and


00:02:07.200 --> 00:02:12.720
Python. And so I picked up Python and I really, really, really loved it again. And that's


00:02:12.720 --> 00:02:17.720
when I went heads down into it. I've spoken my first Python conference. It was PyData


00:02:17.720 --> 00:02:23.480
Carolina 2016, right in my backyard in Durham. IBM was hosting it. Then I attended PyCon


00:02:23.480 --> 00:02:24.980
2018 and the rest with history.


00:02:24.980 --> 00:02:27.060
(laughs)


00:02:27.060 --> 00:02:30.160
- I think a lot of people out in the audience listening,


00:02:30.160 --> 00:02:32.560
many of them have never been to either a regional


00:02:32.560 --> 00:02:37.560
or near international conference, PyCon, you know.


00:02:37.560 --> 00:02:41.880
And so many people I talked to are like,


00:02:41.880 --> 00:02:45.720
I can't, I didn't think I was really good enough to go


00:02:45.720 --> 00:02:47.700
or experienced enough to go or whatever.


00:02:47.700 --> 00:02:50.520
And then they say, well, I went and it was amazing.


00:02:50.520 --> 00:02:52.660
And now I feel so much more part of the community, right?


00:02:52.660 --> 00:02:56.000
Like, I just want to encourage people to, you know,


00:02:56.000 --> 00:02:57.180
like, it sounds like you went there and you're like,


00:02:57.180 --> 00:02:59.660
oh my gosh, I forgot how cool this place was,


00:02:59.660 --> 00:03:02.580
this ecosystem was, and like, I'm in.


00:03:02.580 --> 00:03:03.400
- Absolutely.


00:03:03.400 --> 00:03:05.120
I mean, that's one of the best ways


00:03:05.120 --> 00:03:06.620
to engage the Python community.


00:03:06.620 --> 00:03:08.900
Find your local meetup, find your regional conference,


00:03:08.900 --> 00:03:10.600
or attend the big 'uns.


00:03:10.600 --> 00:03:13.540
- Yeah, and unfortunately, there are people


00:03:13.540 --> 00:03:16.660
who are far away from any of those,


00:03:16.660 --> 00:03:19.300
but there's really good online meetups, right?


00:03:19.300 --> 00:03:21.300
Like, I was just on the PyIndy one,


00:03:21.300 --> 00:03:25.920
and they're doing a hybrid now with the six feet up folks.


00:03:25.920 --> 00:03:29.460
And it's like, they've got their real in-person meetup,


00:03:29.460 --> 00:03:32.020
but then you can participate and you're up on the screen


00:03:32.020 --> 00:03:33.820
with the group and whatnot.


00:03:33.820 --> 00:03:36.300
So there's still ways to do it,


00:03:36.300 --> 00:03:39.980
even if you feel like, well, I live in small town,


00:03:39.980 --> 00:03:42.460
outside of the small town that has no meetup, right?


00:03:42.460 --> 00:03:45.420
I'm the one Python person that I possibly know.


00:03:45.420 --> 00:03:46.980
It's still an option.


00:03:46.980 --> 00:03:49.380
Okay, so you dive in, get into it,


00:03:49.380 --> 00:03:53.100
And you've basically been working in it on and off


00:03:53.100 --> 00:03:55.920
in different aspects for quite a while now.


00:03:55.920 --> 00:03:56.940
- Indeed, indeed.


00:03:56.940 --> 00:03:59.980
I consider Python my favorite programming language.


00:03:59.980 --> 00:04:04.980
Funny fact, until my current job from about 2016


00:04:04.980 --> 00:04:08.840
through 2021, my main programming language at work


00:04:08.840 --> 00:04:09.680
was actually C#.


00:04:09.680 --> 00:04:11.240
And so people would ask me,


00:04:11.240 --> 00:04:12.500
"What do you do with Python at work?"


00:04:12.500 --> 00:04:13.340
I'd say, "Nothing."


00:04:13.340 --> 00:04:14.180
And they think I'm joking.


00:04:14.180 --> 00:04:15.000
I'm like, "Ah."


00:04:15.000 --> 00:04:16.580
(laughing)


00:04:16.580 --> 00:04:18.220
- One can dream, but no, it is not true.


00:04:18.220 --> 00:04:19.060
I don't do any.


00:04:19.060 --> 00:04:25.180
I mean, I do Java, JavaScript, Python, C#, you name it.


00:04:25.180 --> 00:04:28.260
Way long ago, I did test automation in Perl for a couple years.


00:04:28.260 --> 00:04:29.260
That was fun, quote unquote.


00:04:29.260 --> 00:04:34.140
I'm going to write a test regular expression to test the regular expression.


00:04:34.140 --> 00:04:35.140
Oh my gosh.


00:04:35.140 --> 00:04:36.140
Oh my gosh.


00:04:36.140 --> 00:04:37.140
Sorry, I didn't mean to give you flashbacks.


00:04:37.140 --> 00:04:38.140
It's all right.


00:04:38.140 --> 00:04:43.500
That's the one gem that's buried in Perl, I would say.


00:04:43.500 --> 00:04:45.660
Every language has its strengths and weaknesses.


00:04:45.660 --> 00:04:47.700
Perl's strength is RegEx by far.


00:04:47.700 --> 00:04:48.700
Yeah, sure.


00:04:48.700 --> 00:04:50.860
- Yeah, anytime I hear people talking about


00:04:50.860 --> 00:04:52.980
how much they use Perl or love Perl,


00:04:52.980 --> 00:04:56.620
it's got a really strong text understanding element


00:04:56.620 --> 00:04:57.740
to what they're doing.


00:04:57.740 --> 00:05:02.140
Nice, well you spoke about your jobs


00:05:02.140 --> 00:05:03.980
and doing the C# thing.


00:05:03.980 --> 00:05:07.700
And I don't think that that's necessarily that big of,


00:05:07.700 --> 00:05:08.660
I don't think it's a negative.


00:05:08.660 --> 00:05:10.220
You know, there's tons of people who,


00:05:10.220 --> 00:05:11.980
they go to work and work in one language


00:05:11.980 --> 00:05:14.340
and then they maybe come back and they love Python


00:05:14.340 --> 00:05:15.940
or vice versa, maybe they love,


00:05:15.940 --> 00:05:18.180
they do Python and they love JavaScript.


00:05:18.180 --> 00:05:19.740
I don't know, we can get them help.


00:05:19.740 --> 00:05:20.580
Just kidding.


00:05:20.580 --> 00:05:24.540
But I know that for a lot of people,


00:05:24.540 --> 00:05:28.380
the dream is like, how do I do Python full time?


00:05:28.380 --> 00:05:30.500
For now, it's a hobby, but how do I like,


00:05:30.500 --> 00:05:32.060
I'm writing a blog, I'm doing some projects,


00:05:32.060 --> 00:05:33.700
but I wanna do that as my job, right?


00:05:33.700 --> 00:05:36.460
So yeah, you kind of made that transition again,


00:05:36.460 --> 00:05:37.980
in a sense.


00:05:37.980 --> 00:05:39.740
- Yep, now being a developer advocate,


00:05:39.740 --> 00:05:41.820
I play with all the tools in the sandbox.


00:05:41.820 --> 00:05:44.120
- Yeah, that's awesome.


00:05:44.120 --> 00:05:46.380
Yeah, so tell us about what you're doing now.


00:05:46.380 --> 00:05:48.340
- Sure, so I'm a developer advocate


00:05:48.340 --> 00:05:50.220
at a company called Apple Tools.


00:05:50.220 --> 00:05:54.100
Apple Tools focuses on automated visual testing.


00:05:54.100 --> 00:05:55.980
- See if I got this right.


00:05:55.980 --> 00:05:57.020
- There you go, you got it.


00:05:57.020 --> 00:05:58.420
Yeah, some people think I work at Apple.


00:05:58.420 --> 00:05:59.780
It's like, no, no, no, Apple Tools.


00:05:59.780 --> 00:06:03.180
- Apple Tools, A-P-P-L-I, tools.


00:06:03.180 --> 00:06:04.840
I'll put it in the show notes.


00:06:04.840 --> 00:06:05.900
- Sure, sure.


00:06:05.900 --> 00:06:10.020
And so the premise is a lot of traditional functional


00:06:10.020 --> 00:06:13.400
testing is either your manual tester banging on a keyboard,


00:06:13.400 --> 00:06:15.020
looking and clicking through,


00:06:15.020 --> 00:06:17.200
Or if you're doing automation, you're scripting it, right?


00:06:17.200 --> 00:06:19.920
With a tool like Playwright or Cypress


00:06:19.920 --> 00:06:22.760
or Selenium WebDriver, whatever, they're all good tools.


00:06:22.760 --> 00:06:25.360
But when you're using a browser automation tool,


00:06:25.360 --> 00:06:29.360
typically you're taking like the clicks and the typing,


00:06:29.360 --> 00:06:31.900
and then you're scraping the DOM of the page


00:06:31.900 --> 00:06:35.740
to get things like texts or attributes of HTML tags


00:06:35.740 --> 00:06:38.280
or classes, and you're doing some sort of assertions


00:06:38.280 --> 00:06:39.480
on those.


00:06:39.480 --> 00:06:40.320
- Right.


00:06:40.320 --> 00:06:42.560
Sometimes as JavaScript, like a view front end,


00:06:42.560 --> 00:06:44.960
you just get like handlebars back, nothing.


00:06:44.960 --> 00:06:46.160
- Oh, well.


00:06:46.160 --> 00:06:47.200
- Or you gotta do a little bit,


00:06:47.200 --> 00:06:49.360
something more complicated to scrape it,


00:06:49.360 --> 00:06:52.120
but still you're just like comparing text, right?


00:06:52.120 --> 00:06:52.960
And-- - Exactly.


00:06:52.960 --> 00:06:54.360
- About CSS, what about visuals?


00:06:54.360 --> 00:06:57.520
What about JavaScript events being linked up?


00:06:57.520 --> 00:07:00.480
- Exactly, and so you can, in that sense,


00:07:00.480 --> 00:07:02.620
the assertions you're doing are really


00:07:02.620 --> 00:07:05.760
a bare minimal validation of the page.


00:07:05.760 --> 00:07:09.640
The way I like to describe it is,


00:07:09.640 --> 00:07:11.940
most traditional automated scripts will work


00:07:11.940 --> 00:07:14.100
if you rip the entire CSS off the page.


00:07:14.100 --> 00:07:16.020
It would look butt ugly, but your test scripts


00:07:16.020 --> 00:07:16.820
will go through.


00:07:16.820 --> 00:07:21.180
So the question is, is that really proving that it works?


00:07:21.180 --> 00:07:22.860
From a human aspect, no.


00:07:22.860 --> 00:07:26.220
You would expect to make sure that things like your layout


00:07:26.220 --> 00:07:28.060
are good, that your buttons are there,


00:07:28.060 --> 00:07:31.340
that your text is aligned, all the colors are right.


00:07:31.340 --> 00:07:34.620
And so that's where automated visual testing comes in,


00:07:34.620 --> 00:07:38.620
that you would take snapshots of different views of your web


00:07:38.620 --> 00:07:40.460
removal apps, whether it's a full page,


00:07:40.460 --> 00:07:42.220
whether it's a section of a page.


00:07:42.220 --> 00:07:43.640
And then every time you make changes,


00:07:43.640 --> 00:07:45.060
you run the test again,


00:07:45.060 --> 00:07:47.180
and they'll take checkpoint comparisons


00:07:47.180 --> 00:07:49.180
to point out here's what has changed.


00:07:49.180 --> 00:07:50.980
And then you as the tester can decide,


00:07:50.980 --> 00:07:52.380
is that good or bad?


00:07:52.380 --> 00:07:55.940
- Kind of a visual diff, like an image diff.


00:07:55.940 --> 00:07:56.780
- Yeah.


00:07:56.780 --> 00:07:58.260
- And then go from there.


00:07:58.260 --> 00:07:59.100
- Yep.


00:07:59.100 --> 00:08:00.540
And so it's a little bit stronger


00:08:00.540 --> 00:08:03.380
than just like a pixel to pixel comparison, right?


00:08:03.380 --> 00:08:05.700
'Cause if you had a padding shift by two pixels,


00:08:05.700 --> 00:08:07.460
all of a sudden everything's blown up, right?


00:08:07.460 --> 00:08:08.740
- Yeah, exactly.


00:08:08.740 --> 00:08:10.320
If it has the time of day up there


00:08:10.320 --> 00:08:12.380
and the time it goes from 9 to 10,


00:08:12.380 --> 00:08:13.940
it'll shift everything a little bit.


00:08:13.940 --> 00:08:14.740
And you're like, OK.


00:08:14.740 --> 00:08:16.400
>> Yeah, and text changes like that, too.


00:08:16.400 --> 00:08:18.300
So what Apple tools does is it uses visual AI


00:08:18.300 --> 00:08:19.960
to really pick out the things that would


00:08:19.960 --> 00:08:21.900
be noticeable to a human eye.


00:08:21.900 --> 00:08:23.820
So if you have a small shift, not a big deal.


00:08:23.820 --> 00:08:26.260
You can set ignore regions for certain text areas,


00:08:26.260 --> 00:08:28.940
like it's the time of day or those kinds of things.


00:08:28.940 --> 00:08:31.740
So you can really hone these visual assertions


00:08:31.740 --> 00:08:33.940
that you're making.


00:08:33.940 --> 00:08:35.660
Other thing you can do is because they're


00:08:35.660 --> 00:08:38.380
taking snapshots of the page, it's like a full DOM capture.


00:08:38.380 --> 00:08:40.260
It's not just a pixelated screenshot.


00:08:40.260 --> 00:08:42.380
You can take those snapshots and re-render them


00:08:42.380 --> 00:08:44.540
on different browser configurations.


00:08:44.540 --> 00:08:46.940
So, for example, I'm on a Mac.


00:08:46.940 --> 00:08:52.980
I can test on Chrome and Firefox and Safari and Edge now,


00:08:52.980 --> 00:08:56.260
but I can't test IE.


00:08:56.260 --> 00:08:58.180
Well, you could take that snapshot,


00:08:58.180 --> 00:08:59.700
send it up to the Apple tools cloud,


00:08:59.700 --> 00:09:02.380
and then in there, you can test it on IE.


00:09:02.380 --> 00:09:03.220
There you can test it--


00:09:03.220 --> 00:09:04.620
- Or if you're a Windows person,


00:09:04.620 --> 00:09:06.340
like good luck with Safari, right?


00:09:06.340 --> 00:09:07.180
- Oh, exactly, right.


00:09:07.180 --> 00:09:08.020
That's the other one.


00:09:08.020 --> 00:09:10.760
you want to test Safari, but you can't, boom.


00:09:10.760 --> 00:09:13.040
Apple Tools Ultrafast Grid is the way to do that.


00:09:13.040 --> 00:09:14.600
So there's a lot of really cool stuff


00:09:14.600 --> 00:09:17.080
you can do with visual testing.


00:09:17.080 --> 00:09:17.980
- That sounds fun.


00:09:17.980 --> 00:09:21.760
- Yep, and so what I do at Apple Tools,


00:09:21.760 --> 00:09:23.320
I'm a developer advocate.


00:09:23.320 --> 00:09:25.520
So I stand between company and community.


00:09:25.520 --> 00:09:28.200
I help the community understand good testing practices,


00:09:28.200 --> 00:09:29.560
what is visual testing,


00:09:29.560 --> 00:09:32.520
help them get the most out of using Apple Tools,


00:09:32.520 --> 00:09:35.480
and also to be in the community, to advocate for them.


00:09:35.480 --> 00:09:37.060
Here are the problems, here are the needs,


00:09:37.060 --> 00:09:37.900
Here's the struggles.


00:09:37.900 --> 00:09:40.060
How can Apple tools help me?


00:09:40.060 --> 00:09:41.420
- I tell people our tool does this.


00:09:41.420 --> 00:09:42.980
They say, we don't need that solved.


00:09:42.980 --> 00:09:44.180
We need this other slide.


00:09:44.180 --> 00:09:46.460
(laughing)


00:09:46.460 --> 00:09:48.340
And you're like, all right, I'll talk to the team.


00:09:48.340 --> 00:09:49.700
That kind of stuff, right?


00:09:49.700 --> 00:09:50.940
- Yeah, exactly.


00:09:50.940 --> 00:09:51.860
- Yeah, cool.


00:09:51.860 --> 00:09:52.900
Awesome.


00:09:52.900 --> 00:09:57.540
I think the DevRel developer evangelist role is super fun.


00:09:57.540 --> 00:09:59.540
It sounds like a really neat,


00:09:59.540 --> 00:10:01.180
if you're a little bit extroverted,


00:10:01.180 --> 00:10:03.060
you like talking to people, you love code.


00:10:03.060 --> 00:10:05.300
Yeah, I mean, it's great.


00:10:05.300 --> 00:10:06.140
- Yep, yep.


00:10:06.140 --> 00:10:07.900
So one other thing I do want to mention


00:10:07.900 --> 00:10:09.620
with the whole Apple tools dev rel thing,


00:10:09.620 --> 00:10:13.100
Apple tools runs something called test automation university


00:10:13.100 --> 00:10:16.500
which is a free platform full of online courses


00:10:16.500 --> 00:10:21.100
about testing automation and everything on that topic.


00:10:21.100 --> 00:10:23.220
So we got some of the best instructors in the world


00:10:23.220 --> 00:10:24.700
who have these courses.


00:10:24.700 --> 00:10:26.820
I've taught three of the Python courses.


00:10:26.820 --> 00:10:28.900
(laughs)


00:10:28.900 --> 00:10:31.460
I would recommend folks check it out.


00:10:31.460 --> 00:10:34.580
Test automation university, TAU, it's good stuff.


00:10:35.460 --> 00:10:38.100
- Awesome, all right, Automation Panda.


00:10:38.100 --> 00:10:42.320
- Oh my goodness, so yes, I also happen to be called


00:10:42.320 --> 00:10:46.260
the Automation Panda, that's just me,


00:10:46.260 --> 00:10:49.060
you know, there's no like company or anything,


00:10:49.060 --> 00:10:52.380
it's just my moniker, it's my Twitter handle, it's my blog.


00:10:52.380 --> 00:10:55.180
The way I, or the reason I started


00:10:55.180 --> 00:10:57.100
the whole Automation Panda thing,


00:10:57.100 --> 00:10:59.500
back in 2016, I got my first position


00:10:59.500 --> 00:11:02.060
as a senior level engineer, and I thought,


00:11:02.060 --> 00:11:04.580
wow, this is great, I've achieved my career dream,


00:11:04.580 --> 00:11:11.380
senior level, people are going to listen to me now. What's next? Up until that point,


00:11:11.380 --> 00:11:16.240
all the work I'd ever done had been behind company proprietary walls, even if that work


00:11:16.240 --> 00:11:22.680
had not necessarily been proprietary or secret or anything like that. I got sick of rewriting


00:11:22.680 --> 00:11:28.240
the same dang wiki pages across multiple teams. So I was like, you know what? Maybe I can


00:11:28.240 --> 00:11:32.360
do something more public facing. Maybe I can write those wiki pages on something like a


00:11:32.360 --> 00:11:34.880
a blog that everyone can just Google for and find.


00:11:34.880 --> 00:11:36.600
Especially me, because I don't want to have to repeat


00:11:36.600 --> 00:11:38.560
the same things over and over again.


00:11:38.560 --> 00:11:41.240
And so I was like, okay, I'll start a blog.


00:11:41.240 --> 00:11:44.320
And I needed a catchy name because you go to, you know,


00:11:44.320 --> 00:11:46.280
whatever website to register your domain.


00:11:46.280 --> 00:11:50.320
And I'm like, well, andrewknight.com is not available.


00:11:50.320 --> 00:11:52.880
And nobody's going to remember Andrew Knight anyway.


00:11:52.880 --> 00:11:54.400
Let me come up with something catchy.


00:11:54.400 --> 00:11:57.020
And I just planted on Automation Panda.


00:11:57.020 --> 00:11:58.600
Automation for test automation,


00:11:58.600 --> 00:12:00.920
Panda because pandas are awesome.


00:12:00.920 --> 00:12:01.880
- Yeah, awesome.


00:12:01.880 --> 00:12:02.720
- There we go.


00:12:02.720 --> 00:12:06.260
- And pandas hate crashing web apps and desktop apps.


00:12:06.260 --> 00:12:11.040
As I think across the different animals


00:12:11.040 --> 00:12:12.180
throughout the animal kingdom,


00:12:12.180 --> 00:12:15.480
they are very finicky about a failed app,


00:12:15.480 --> 00:12:17.640
a bad push or whatever.


00:12:17.640 --> 00:12:19.120
No, I'm just kidding.


00:12:19.120 --> 00:12:19.940
That's awesome.


00:12:19.940 --> 00:12:21.180
And I certainly know you through this


00:12:21.180 --> 00:12:24.400
and you've done a lot of general advocacy


00:12:24.400 --> 00:12:27.160
for testing in the Python space there.


00:12:27.160 --> 00:12:28.880
- Yeah, I advocated for good testing


00:12:28.880 --> 00:12:30.680
before I was a developer advocate.


00:12:30.680 --> 00:12:33.360
- (laughs) That is true.


00:12:33.360 --> 00:12:35.680
- Well, I mean, I think that that's often


00:12:35.680 --> 00:12:38.040
how people get into these roles.


00:12:38.040 --> 00:12:40.040
You think, there's probably a lot of people


00:12:40.040 --> 00:12:41.840
that are thinking like, I would love to have that role,


00:12:41.840 --> 00:12:44.960
so I'm gonna try to apply so I can get that role.


00:12:44.960 --> 00:12:48.620
And you did a bunch of public speaking and presentations,


00:12:48.620 --> 00:12:51.720
and I'm sure they saw that, like, this guy is great.


00:12:51.720 --> 00:12:54.080
We just need to have him on our team, you know?


00:12:54.080 --> 00:12:59.080
And I got hired doing in-person developer training


00:13:00.120 --> 00:13:02.960
because I was speaking at user groups and meetups


00:13:02.960 --> 00:13:05.040
and conferences and blogging,


00:13:05.040 --> 00:13:08.440
then they're just like, I see you doing this for free.


00:13:08.440 --> 00:13:09.560
Would you like a job to do?


00:13:09.560 --> 00:13:11.120
And I'm like, that sounds awesome.


00:13:11.120 --> 00:13:11.960
Let's do that.


00:13:11.960 --> 00:13:16.240
So yeah, it's definitely advice people can take


00:13:16.240 --> 00:13:18.440
sort of as a path forward.


00:13:18.440 --> 00:13:19.520
- Oh yeah, definitely.


00:13:19.520 --> 00:13:20.640
- Where you are, yeah.


00:13:20.640 --> 00:13:23.640
- When you generate content,


00:13:23.640 --> 00:13:26.120
that becomes your electronic business card.


00:13:26.120 --> 00:13:27.680
That's how people get to know you.


00:13:27.680 --> 00:13:29.760
And so if you have the things you like,


00:13:29.760 --> 00:13:32.660
the things you like will start coming to you.


00:13:32.660 --> 00:13:34.920
- Yep, absolutely.


00:13:34.920 --> 00:13:39.300
All right, now how about we talk a little bit of testing?


00:13:39.300 --> 00:13:40.480
- Let's do it.


00:13:40.480 --> 00:13:45.480
- Yeah, so the kind of testing that we're talking about here


00:13:45.480 --> 00:13:50.220
is somewhat related actually to your current job


00:13:50.220 --> 00:13:51.720
at Apple tools, right?


00:13:51.720 --> 00:13:53.880
Is it's, I don't know if you're using the same tool


00:13:53.880 --> 00:13:57.040
in exactly everything, but it's the similar idea


00:13:57.040 --> 00:14:02.040
of not just, okay, I've got a stack data structure


00:14:02.040 --> 00:14:06.200
and I can push a thing onto it and I can pop it off.


00:14:06.200 --> 00:14:08.200
And if I pop, do you want to pop it off?


00:14:08.200 --> 00:14:09.200
It's gonna be the second one.


00:14:09.200 --> 00:14:11.040
Okay, our app is working, right?


00:14:11.040 --> 00:14:16.040
It's trying to understand more than that,


00:14:16.040 --> 00:14:19.480
more of a kind of an integration black box level of testing,


00:14:19.480 --> 00:14:20.560
would you say?


00:14:20.560 --> 00:14:21.680
- Correct, correct.


00:14:21.680 --> 00:14:24.360
I always say there is a big difference


00:14:24.360 --> 00:14:27.820
between testing code and testing features.


00:14:27.820 --> 00:14:30.180
Testing code is what we would think of as white box


00:14:30.180 --> 00:14:33.780
or unit testing, or maybe sometimes subcutaneous testing,


00:14:33.780 --> 00:14:36.600
where you're testing to make sure that the implementation


00:14:36.600 --> 00:14:38.900
of whatever code you wrote, be it a function or method


00:14:38.900 --> 00:14:43.280
or something else, is working according to specification.


00:14:43.280 --> 00:14:46.220
Like, okay, I have a function, an absolute value function.


00:14:46.220 --> 00:14:48.660
Let me make sure that I have a table of inputs


00:14:48.660 --> 00:14:50.820
that meet the expected table of outputs, right?


00:14:50.820 --> 00:14:53.240
Input, output doesn't match.


00:14:53.240 --> 00:14:54.880
That would be unit testing.


00:14:54.880 --> 00:14:58.400
And so it's very good for pinpointing things quickly,


00:14:58.400 --> 00:15:00.320
right, unit tests are very fast.


00:15:00.320 --> 00:15:02.280
It catches problems at their source,


00:15:02.280 --> 00:15:05.720
but it doesn't test things like,


00:15:05.720 --> 00:15:07.520
okay, can you actually complete the workflow


00:15:07.520 --> 00:15:10.040
that this whole big application is designed to do?


00:15:10.040 --> 00:15:11.880
Right, that's where pure testing comes in.


00:15:11.880 --> 00:15:13.960
That's where you have to do something black box.


00:15:13.960 --> 00:15:16.800
- Yeah, unit testing is good when you are focused in


00:15:16.800 --> 00:15:20.960
on a part of the app, like this part is the part


00:15:20.960 --> 00:15:23.400
that checks whether or not I can access this page,


00:15:23.400 --> 00:15:24.640
whether or not the user's logged in.


00:15:24.640 --> 00:15:27.320
So let me try to request it with a user that's not logged in.


00:15:27.320 --> 00:15:29.120
Let me try to request it with a user that is.


00:15:29.120 --> 00:15:31.520
How about now one with who's one's logged in


00:15:31.520 --> 00:15:34.400
but doesn't have access through some role thing.


00:15:34.400 --> 00:15:35.480
Right, like that is fine.


00:15:35.480 --> 00:15:40.120
But most applications as they grow become,


00:15:40.120 --> 00:15:43.080
like Lego pieces that click together, right?


00:15:43.080 --> 00:15:45.800
And if you think about web apps or APIs,


00:15:45.800 --> 00:15:48.760
or I don't even wanna think about microservices.


00:15:48.760 --> 00:15:51.340
(laughing)


00:15:51.340 --> 00:15:52.820
They become these things like,


00:15:52.820 --> 00:15:57.480
well, here's the database with its schema and constraints,


00:15:57.480 --> 00:16:01.220
and here's the data layer, and here's my view method,


00:16:01.220 --> 00:16:03.340
and then these are the routes that are set up


00:16:03.340 --> 00:16:05.980
based on this view, and here's the static folder


00:16:05.980 --> 00:16:07.940
for the JavaScript, and then it renders,


00:16:07.940 --> 00:16:09.740
and just here's the HTML template.


00:16:09.740 --> 00:16:14.640
It'd be insanity to try to test those on a unit level


00:16:14.640 --> 00:16:17.700
and then be sure that, well, I tested the view,


00:16:17.700 --> 00:16:20.400
and then I tested the template and somehow I feel like that's okay


00:16:20.400 --> 00:16:22.400
because they could get out of sync.


00:16:22.400 --> 00:16:28.040
Exactly. Having that full application ready to go


00:16:28.040 --> 00:16:32.080
and you're testing it as if you were a user is very, very valuable.


00:16:32.080 --> 00:16:36.400
It can be painful to set up. It can be painful to think about all the scenarios to do.


00:16:36.400 --> 00:16:39.960
But it is also incredibly valuable and the results you get from it.


00:16:39.960 --> 00:16:45.200
Yeah, and I made the snarky comment about like a view or react front end as well.


00:16:45.200 --> 00:16:50.200
which really requires a little bit more of a test


00:16:50.200 --> 00:16:54.040
that understands the behavior rather than just creating


00:16:54.040 --> 00:16:57.160
like a flask test app and requesting the view,


00:16:57.160 --> 00:17:00.400
you're just gonna get back where the binding bits


00:17:00.400 --> 00:17:02.480
of the JavaScript framework go.


00:17:02.480 --> 00:17:04.680
You need something like a web browser, right?


00:17:04.680 --> 00:17:06.160
- Exactly, yes, yes.


00:17:06.160 --> 00:17:08.880
You need to pull up the page, load it in a browser


00:17:08.880 --> 00:17:10.160
and see what it does.


00:17:10.160 --> 00:17:12.880
And you know, you mentioned, I know this is the Python


00:17:12.880 --> 00:17:14.720
podcast and so we love Python.


00:17:14.720 --> 00:17:16.060
I love Python.


00:17:16.060 --> 00:17:19.260
But in the web space, it's inevitable,


00:17:19.260 --> 00:17:21.460
unless you're using HTMX or something,


00:17:21.460 --> 00:17:24.500
that Python is gonna test JavaScript at some point, right?


00:17:24.500 --> 00:17:27.620
- Yeah, yeah, exactly.


00:17:27.620 --> 00:17:30.500
They're gonna crash together, definitely,


00:17:30.500 --> 00:17:31.620
in the web space, for sure,


00:17:31.620 --> 00:17:34.180
unless you are purely on the API side,


00:17:34.180 --> 00:17:36.380
and who knows, probably somehow still


00:17:36.380 --> 00:17:38.700
it'll worm its way in there.


00:17:38.700 --> 00:17:42.340
So traditionally, this kind of testing


00:17:42.340 --> 00:17:44.740
has been done by pulling up a browser.


00:17:44.740 --> 00:17:45.900
It could be several levels.


00:17:45.900 --> 00:17:49.220
It could be, okay, I get my feature implemented


00:17:49.220 --> 00:17:51.060
and I go clickety, clickety, click.


00:17:51.060 --> 00:17:52.740
Seems like it's working, let's push it.


00:17:52.740 --> 00:17:56.180
Right, that's, let's call that level zero testing.


00:17:56.180 --> 00:17:57.940
Actually, that's level like point one


00:17:57.940 --> 00:17:59.900
because level zero is just make the feature change


00:17:59.900 --> 00:18:01.540
and push it and then wait for it


00:18:01.540 --> 00:18:03.340
to see whether it crashed, right?


00:18:03.340 --> 00:18:06.080
No test, no test is level zero.


00:18:06.080 --> 00:18:07.620
But then just above that is,


00:18:07.620 --> 00:18:09.460
I kind of sort of clicked around


00:18:09.460 --> 00:18:11.140
in the area that I think I might have affected


00:18:11.140 --> 00:18:12.500
to see that it works, right?


00:18:12.500 --> 00:18:13.540
Maybe take it from there.


00:18:13.540 --> 00:18:16.580
Like, where do we go from there if we want to be better?


00:18:16.580 --> 00:18:18.340
- Well, I would caveat to say,


00:18:18.340 --> 00:18:20.980
maybe it's not necessarily layers of getting better.


00:18:20.980 --> 00:18:23.820
There is always a place for manual testing.


00:18:23.820 --> 00:18:25.180
The place for manual testing


00:18:25.180 --> 00:18:27.740
is what I would consider exploratory testing,


00:18:27.740 --> 00:18:30.020
because it's still good to have a human go in there


00:18:30.020 --> 00:18:33.940
and try things and feel the experience, right?


00:18:33.940 --> 00:18:35.300
Because like we said before,


00:18:35.300 --> 00:18:37.180
a lot of test automation struggles


00:18:37.180 --> 00:18:39.220
to handle things like visuals,


00:18:39.220 --> 00:18:41.700
struggles to handle things like good design,


00:18:41.700 --> 00:18:44.360
judging design, judging user experience.


00:18:44.360 --> 00:18:45.200
And so--


00:18:45.200 --> 00:18:47.660
- Does it feel laggy or is it responsive?


00:18:47.660 --> 00:18:49.100
- Exactly, exactly.


00:18:49.100 --> 00:18:50.860
Performance issues and stuff.


00:18:50.860 --> 00:18:53.980
And so people like, they start clicking and typing,


00:18:53.980 --> 00:18:55.980
it's immediate, you know?


00:18:55.980 --> 00:18:59.300
Like if anything is laggier than like 0.4 seconds


00:18:59.300 --> 00:19:01.900
or something, I forget the name of that threshold.


00:19:01.900 --> 00:19:04.100
That's categorically bad, right?


00:19:05.460 --> 00:19:12.580
But what we don't want to do is have the bulk of our testing


00:19:12.580 --> 00:19:14.500
coverage done that way.


00:19:14.500 --> 00:19:15.980
We don't want to have the--


00:19:15.980 --> 00:19:18.580
let's say, like the majority of our functional test cases


00:19:18.580 --> 00:19:19.860
executed manually.


00:19:19.860 --> 00:19:23.540
Because the idea of a test case is a well-defined procedure


00:19:23.540 --> 00:19:25.740
that you step through one through n, you do the steps,


00:19:25.740 --> 00:19:28.820
and you make sure it works.


00:19:28.820 --> 00:19:31.320
That kind of testing is where we might want to, quote unquote,


00:19:31.320 --> 00:19:33.340
"level up" to something like automation,


00:19:33.340 --> 00:19:35.340
where you have these complementary practices of,


00:19:35.340 --> 00:19:40.060
have automation do the rote, repetitive,


00:19:40.060 --> 00:19:42.780
but still necessary checks along the way,


00:19:42.780 --> 00:19:45.420
and then have your humans be creative in exploring


00:19:45.420 --> 00:19:48.420
and be able to judge the things that a script can't necessarily


00:19:48.420 --> 00:19:49.740
judge for you.


00:19:49.740 --> 00:19:50.240
>>Right.


00:19:50.240 --> 00:19:54.380
It would be lovely to leverage continuous integration


00:19:54.380 --> 00:19:56.860
and tools like that all over the place.


00:19:56.860 --> 00:20:01.460
And if you don't have at least some basic level of automation,


00:20:01.460 --> 00:20:03.820
that's more or less inaccessible to you.


00:20:03.820 --> 00:20:07.020
So let's take an example of I've got a Django CMS


00:20:07.020 --> 00:20:08.840
that I built and it's open source.


00:20:08.840 --> 00:20:13.100
And I wanna allow people to send PRs to me


00:20:13.100 --> 00:20:16.060
to contribute back to this general CMS like WordPress,


00:20:16.060 --> 00:20:19.860
but with Django press, I'll just make up a random term.


00:20:19.860 --> 00:20:21.600
It probably exists, who knows.


00:20:21.600 --> 00:20:23.020
But like imagine my Django press,


00:20:23.020 --> 00:20:24.220
I wanna allow contributors


00:20:24.220 --> 00:20:26.660
and they're going to submit stuff, right?


00:20:26.660 --> 00:20:29.800
If I don't have something a little bit


00:20:29.800 --> 00:20:31.740
like the testing you're describing,


00:20:31.740 --> 00:20:35.220
and every PR, I've got to go download it, try it out,


00:20:35.220 --> 00:20:36.900
and do those things.


00:20:36.900 --> 00:20:38.660
And as opposed to, no, the test didn't


00:20:38.660 --> 00:20:41.740
pass because you broke this thing, first fix that, please.


00:20:41.740 --> 00:20:42.300
Exactly.


00:20:42.300 --> 00:20:44.940
Your automated test suites are your safety net.


00:20:44.940 --> 00:20:49.300
And they should account for a very high percentage


00:20:49.300 --> 00:20:53.460
of the coverage that you would want in your testing.


00:20:53.460 --> 00:20:57.220
The idea is the automated test will do almost all the kinds


00:20:57.220 --> 00:20:58.980
of things, and then you would just


00:20:58.980 --> 00:21:01.660
have yourself or someone else go in and just kind of,


00:21:01.660 --> 00:21:04.340
poke around real quick, make sure everything is still good.


00:21:04.340 --> 00:21:05.220
There's an, let me try that.


00:21:05.220 --> 00:21:06.060
Okay, good.


00:21:06.060 --> 00:21:07.400
You know, and then feel good


00:21:07.400 --> 00:21:10.100
because you spent a little bit of time sanity check,


00:21:10.100 --> 00:21:11.740
making sure everything is still good


00:21:11.740 --> 00:21:13.360
from a user experience perspective.


00:21:13.360 --> 00:21:15.820
All you had the battery of your automated squeeze


00:21:15.820 --> 00:21:18.660
and batter the crap out of whatever changed this weather.


00:21:18.660 --> 00:21:20.260
And it's like, oh, they all pass.


00:21:20.260 --> 00:21:22.020
- Yeah, yeah.


00:21:22.020 --> 00:21:23.860
I'm 95% sure we're okay.


00:21:23.860 --> 00:21:24.700
Now let's go from there.


00:21:24.700 --> 00:21:25.980
Yeah.


00:21:25.980 --> 00:21:26.820
- Exactly.


00:21:26.820 --> 00:21:29.340
- You can also hone in on the really important things,


00:21:29.340 --> 00:21:31.780
- Right, like in your CMS thing,


00:21:31.780 --> 00:21:33.260
maybe there's a reporting section


00:21:33.260 --> 00:21:35.420
that reports page hits over time,


00:21:35.420 --> 00:21:37.720
or if that goes down, that's not great.


00:21:37.720 --> 00:21:41.860
But if the main page, your main site won't even load,


00:21:41.860 --> 00:21:43.900
that's worse than the reporting being screwed up, right?


00:21:43.900 --> 00:21:46.820
So you can focus in on those areas


00:21:46.820 --> 00:21:50.440
and really put the energy where people are gonna notice,


00:21:50.440 --> 00:21:54.260
consider it fully broken, basically.


00:21:54.260 --> 00:21:55.260
- Indeed, indeed.


00:21:55.260 --> 00:21:56.900
- All right, so the tools of the trade


00:21:56.900 --> 00:21:59.860
traditionally have been Selenium for this type of thing,


00:21:59.860 --> 00:22:00.700
right?


00:22:00.700 --> 00:22:03.480
And not to bash on Selenium anyway, it's pretty awesome,


00:22:03.480 --> 00:22:06.520
but we're gonna talk about some sweet new stuff as well


00:22:06.520 --> 00:22:08.860
that also works with Python in nice ways.


00:22:08.860 --> 00:22:11.240
- Indeed.


00:22:11.240 --> 00:22:14.480
- Yeah, so maybe tell people real quick about Selenium


00:22:14.480 --> 00:22:15.840
and then we'll talk about Playwright


00:22:15.840 --> 00:22:17.880
and you can compare those.


00:22:17.880 --> 00:22:18.720
- Absolutely.


00:22:18.720 --> 00:22:20.120
So as you said, Michael,


00:22:20.120 --> 00:22:25.120
Selenium has been the classic browser automation tool.


00:22:25.240 --> 00:22:28.400
It's been around for, oh gosh, well over a decade now.


00:22:28.400 --> 00:22:30.280
It's hard to believe.


00:22:30.280 --> 00:22:32.600
Almost like two decades?


00:22:32.600 --> 00:22:36.200
I mean, the very, very early, early things that ultimately


00:22:36.200 --> 00:22:38.080
became the Selenium project.


00:22:38.080 --> 00:22:42.160
How Selenium works is that you will have your browser,


00:22:42.160 --> 00:22:48.040
whether that's Chrome, IE, Firefox, Fari, what have you.


00:22:48.040 --> 00:22:50.960
You will have the--


00:22:50.960 --> 00:22:51.840
there's the browser.


00:22:51.840 --> 00:22:54.460
Then there is this WebDriver executable


00:22:54.460 --> 00:22:56.540
that acts as a proxy between the browser


00:22:56.540 --> 00:22:58.920
and your test automation code.


00:22:58.920 --> 00:23:01.220
And then in your test automation code,


00:23:01.220 --> 00:23:04.180
you have language binding that will send requests


00:23:04.180 --> 00:23:08.300
to the browser or the Splendid WebDriver executable.


00:23:08.300 --> 00:23:09.940
It used to use a JSON protocol.


00:23:09.940 --> 00:23:12.340
I think in Splendid before they might change some things.


00:23:12.340 --> 00:23:13.780
I don't remember exactly.


00:23:13.780 --> 00:23:16.100
Basically, you send requests to the thing,


00:23:16.100 --> 00:23:17.820
and its proxy goes to the browser,


00:23:17.820 --> 00:23:19.140
performs whatever thing you wanted.


00:23:19.140 --> 00:23:19.980
Did you wanna click?


00:23:19.980 --> 00:23:21.020
Did you wanna get text?


00:23:21.020 --> 00:23:22.380
Sends the response back through.


00:23:22.380 --> 00:23:25.560
And so that's how your automation can control the browser.


00:23:25.560 --> 00:23:28.360
This is back and forth between the browser


00:23:28.360 --> 00:23:31.620
and your automation through this proxy executable.


00:23:31.620 --> 00:23:34.820
Selenium is an open source project.


00:23:34.820 --> 00:23:37.380
So everything is available online.


00:23:37.380 --> 00:23:40.340
They have multiple language bindings, not just Python,


00:23:40.340 --> 00:23:44.260
Java, JavaScript, Python, C#, Ruby.


00:23:44.260 --> 00:23:46.460
I don't know if there are any others,


00:23:46.460 --> 00:23:48.300
but those would be like the big five.


00:23:48.300 --> 00:23:50.560
What else? What else?


00:23:50.560 --> 00:23:52.560
Not only is Selenium open source,


00:23:52.560 --> 00:23:56.600
but it is also open standards and open governance.


00:23:56.600 --> 00:24:00.360
Those might be new things or new phrases for some people.


00:24:00.360 --> 00:24:02.000
So let's go over them real quick.


00:24:02.000 --> 00:24:06.600
Open source means that the source code


00:24:06.600 --> 00:24:09.840
for all the implementations for Selenium WebDriver


00:24:09.840 --> 00:24:12.360
as well as the other tools, Selenium IDE and Grid,


00:24:12.360 --> 00:24:13.600
which I'll talk about in a moment,


00:24:13.600 --> 00:24:15.000
those are all GitHub.


00:24:15.000 --> 00:24:18.160
You can check out the source, you can look at it,


00:24:18.160 --> 00:24:19.880
you can fork it, you can make changes.


00:24:19.880 --> 00:24:21.800
If you want to contribute to the main project,


00:24:21.800 --> 00:24:23.720
you can submit pull requests.


00:24:23.720 --> 00:24:26.880
And so that is all open and free.


00:24:26.880 --> 00:24:29.800
Open standards, what does that mean?


00:24:29.800 --> 00:24:33.880
The way Selenium works is it uses the WebDriver protocol


00:24:33.880 --> 00:24:35.920
to communicate with browsers.


00:24:35.920 --> 00:24:41.120
WebDriver as a protocol is a W3C standard.


00:24:41.120 --> 00:24:43.760
It's something that all major browser vendors


00:24:43.760 --> 00:24:45.480
are supposed to conform to.


00:24:45.480 --> 00:24:47.640
And that was a hard-fought battle


00:24:47.640 --> 00:24:50.200
to get that to be a W3C recommendation.


00:24:50.200 --> 00:24:53.560
What that means is that hopefully in perpetuity,


00:24:53.560 --> 00:24:56.720
WebDriver will work with every major browser out there.


00:24:56.720 --> 00:24:57.560
Right?


00:24:57.560 --> 00:24:58.380
- Right.


00:24:58.380 --> 00:25:01.160
If we get a Zerodium instead of a Chromium in the future,


00:25:01.160 --> 00:25:04.600
it theoretically will come with that, right?


00:25:04.600 --> 00:25:06.160
- So that we could use the same protocol,


00:25:06.160 --> 00:25:07.440
meaning we could use the same tools


00:25:07.440 --> 00:25:09.840
to automate the basic browser interactions.


00:25:09.840 --> 00:25:11.480
So that's open standards.


00:25:11.480 --> 00:25:15.040
Open governance means that Selenium is not controlled


00:25:15.040 --> 00:25:19.640
by any single party or private entity or single company.


00:25:19.640 --> 00:25:21.920
The way that the Selenium project is governed


00:25:21.920 --> 00:25:25.560
is by a consortium of open source contributors


00:25:25.560 --> 00:25:26.640
and collaborators.


00:25:26.640 --> 00:25:27.800
I know many of these folks,


00:25:27.800 --> 00:25:30.520
they span multiple different companies.


00:25:30.520 --> 00:25:34.840
And so that way it's not like one person can control it,


00:25:34.840 --> 00:25:36.200
one person can't kill it.


00:25:36.200 --> 00:25:38.960
And again, everything is open,


00:25:38.960 --> 00:25:40.960
so it's not like it's a secret little cabal


00:25:40.960 --> 00:25:42.580
that everybody's scheming together.


00:25:42.580 --> 00:25:44.600
No, you can go read the meeting notes


00:25:44.600 --> 00:25:46.600
for the monthly meetings of the Selenium team.


00:25:46.600 --> 00:25:50.140
So that's Selenium in a nutshell.


00:25:50.140 --> 00:25:53.240
Most times when people talk about Selenium


00:25:53.240 --> 00:25:55.740
for browser automation, they mean Selenium WebDriver.


00:25:55.740 --> 00:26:00.100
That's like when you pip install Selenium in Python,


00:26:00.100 --> 00:26:02.100
you're getting the Selenium WebDriver package.


00:26:02.100 --> 00:26:04.980
That's the Python language bindings for the WebDriver protocol


00:26:04.980 --> 00:26:06.980
that you can go communicate with the browser.


00:26:06.980 --> 00:26:11.180
The other two projects, Selenium IDE


00:26:11.180 --> 00:26:14.580
is basically like a visual builder.


00:26:14.580 --> 00:26:17.160
So instead of you trying to figure out your XPaths and everything,


00:26:17.160 --> 00:26:19.860
you can use Selenium ID to create a visual builder


00:26:19.860 --> 00:26:21.860
for your test case steps.


00:26:21.860 --> 00:26:24.820
And the other project they have is Selenium Grid,


00:26:24.820 --> 00:26:28.100
which is this scale-out solution.


00:26:28.100 --> 00:26:30.940
So rather than running all the browsers


00:26:30.940 --> 00:26:32.940
on your local machine for testing,


00:26:32.940 --> 00:26:35.980
because that will max out your system resources


00:26:35.980 --> 00:26:37.980
very quickly if you parallelize,


00:26:37.980 --> 00:26:39.980
you can distribute that remotely.


00:26:39.980 --> 00:26:44.100
can have a cluster of nodes that have IE,


00:26:44.100 --> 00:26:46.740
some of them have Chrome, some have Safari,


00:26:46.740 --> 00:26:48.460
and so then you make remote requests


00:26:48.460 --> 00:26:50.780
and do the automation that way.


00:26:50.780 --> 00:26:53.300
So that's Selenium.


00:26:53.300 --> 00:26:54.700
- Okay, very cool.


00:26:54.700 --> 00:26:57.240
And like you said, it's been around for a while.


00:26:57.240 --> 00:27:01.540
And then the new one on the block is Playwright.


00:27:01.540 --> 00:27:06.060
And it's, conceptually, people should think of it


00:27:06.060 --> 00:27:09.760
like similar to Selenium, I think, as your mental model,


00:27:09.760 --> 00:27:11.120
I would guess.


00:27:11.120 --> 00:27:14.680
But then it has some differences and advantages,


00:27:14.680 --> 00:27:18.440
one of which is it had 10 years of experience to build upon.


00:27:18.440 --> 00:27:21.520
Maybe tell us about Playwright.


00:27:21.520 --> 00:27:22.360
- Sure, sure.


00:27:22.360 --> 00:27:25.560
So Selenium and Playwright at their core,


00:27:25.560 --> 00:27:28.960
the highest level are both browser automation tools.


00:27:28.960 --> 00:27:31.840
They go in, they do the clicks, they do the scrapes,


00:27:31.840 --> 00:27:34.200
you know, they send back the answers.


00:27:34.200 --> 00:27:36.060
So in that sense, they're similar.


00:27:38.200 --> 00:27:40.680
But in terms of their--


00:27:40.680 --> 00:27:41.880
and also, the main--


00:27:41.880 --> 00:27:43.180
I should also just caveat this.


00:27:43.180 --> 00:27:45.640
The main use case for both Selenium Playwright


00:27:45.640 --> 00:27:46.520
is test automation.


00:27:46.520 --> 00:27:48.260
You can use it for any kind of automation,


00:27:48.260 --> 00:27:52.360
but primarily people use it for testing.


00:27:52.360 --> 00:27:55.720
And I will talk mainly in the domain of testing.


00:27:55.720 --> 00:27:59.480
You could use it for if you wanted to, I don't know,


00:27:59.480 --> 00:28:03.280
refresh a page every hour and scrape it using Scrappy


00:28:03.280 --> 00:28:03.880
or something.


00:28:03.880 --> 00:28:04.620
You could do that.


00:28:04.620 --> 00:28:07.600
But anyway, let's talk-- just keep the focus on testing.


00:28:07.600 --> 00:28:11.120
I kind of what would have like in my history would have liked to automate


00:28:11.120 --> 00:28:17.280
Registering for college classes so I could get the 10 a.m. Classes not not the 7 30 a.m. Calculus class


00:28:17.280 --> 00:28:20.640
Yep. Yep, if only if only right


00:28:20.640 --> 00:28:28.720
so, so playwright selenium both browser automation tools, but the ways in which they go about that are different


00:28:28.720 --> 00:28:34.640
Selenium uses that web driver protocol which kind of operates outside the browser, right?


00:28:36.460 --> 00:28:39.740
Playwright uses debug protocols.


00:28:39.740 --> 00:28:43.040
So basically, Chrome DevTools and Firefox


00:28:43.040 --> 00:28:44.240
is equivalent and all that.


00:28:44.240 --> 00:28:46.040
That's what Playwright focuses on.


00:28:46.040 --> 00:28:52.000
So in that case, Playwright can access things about a browser


00:28:52.000 --> 00:28:56.400
that either Selenium can't or Selenium struggles to.


00:28:56.400 --> 00:29:01.480
It also makes Playwright run a bit faster than Selenium.


00:29:01.480 --> 00:29:07.440
One of the big complaints about Selenium-based tests


00:29:07.440 --> 00:29:09.440
is that they are slow.


00:29:09.440 --> 00:29:13.200
Now, this is due to the nature of them being black box,


00:29:13.200 --> 00:29:15.520
that you need to have the whole system up.


00:29:15.520 --> 00:29:16.520
The fact that--


00:29:16.520 --> 00:29:18.560
Launch your entire browser, and then we're


00:29:18.560 --> 00:29:20.600
going to send it messages, and then shut it down,


00:29:20.600 --> 00:29:22.400
and then launch it again for the next test.


00:29:22.400 --> 00:29:23.440
Right, right.


00:29:23.440 --> 00:29:27.520
So based on the nature of UI or black box testing,


00:29:27.520 --> 00:29:29.000
there is sluggishness there.


00:29:29.000 --> 00:29:31.740
But at the same time, like you just mentioned,


00:29:31.740 --> 00:29:34.180
the whole browser setup thing can be kind of slow.


00:29:34.180 --> 00:29:35.860
Playwright has some optimizations


00:29:35.860 --> 00:29:37.220
there that are pretty interesting.


00:29:37.220 --> 00:29:40.140
So it can be a little bit faster.


00:29:40.140 --> 00:29:44.340
Another big difference between Playwright and Selenium,


00:29:44.340 --> 00:29:51.220
Selenium WebDriver is meant to be more of a low-level


00:29:51.220 --> 00:29:53.420
interface.


00:29:53.420 --> 00:29:57.100
So the interactions that you would do with Selenium


00:29:57.100 --> 00:29:58.180
are very raw.


00:29:58.180 --> 00:30:01.040
Like when you do a click, it'll send the click event,


00:30:01.040 --> 00:30:01.820
and that's it.


00:30:01.820 --> 00:30:03.820
It doesn't wait for the thing to be received.


00:30:03.820 --> 00:30:07.060
It doesn't wait for the page to load or do anything magic.


00:30:07.060 --> 00:30:08.340
It just goes.


00:30:08.340 --> 00:30:10.980
And so with Selenium, you have to do a lot


00:30:10.980 --> 00:30:14.820
of explicit waiting for things.


00:30:14.820 --> 00:30:17.460
Because if you click and you don't wait for the page


00:30:17.460 --> 00:30:21.340
to reflect, and then you proceed to your next interaction,


00:30:21.340 --> 00:30:24.340
the page might not be ready, the element might not be loaded,


00:30:24.340 --> 00:30:26.380
and your test will go kaboom.


00:30:26.380 --> 00:30:30.380
And then your tweet gets criticized for being "flaky."


00:30:30.380 --> 00:30:32.380
Right?


00:30:32.380 --> 00:30:34.380
Yeah, absolutely. Well...


00:30:34.380 --> 00:30:37.880
This is what happens in the JavaScript world.


00:30:37.880 --> 00:30:40.880
It's not the instant the page shows up.


00:30:40.880 --> 00:30:43.380
It's got to then bring down the JavaScript,


00:30:43.380 --> 00:30:45.380
then maybe the JavaScript talks to some API,


00:30:45.380 --> 00:30:47.880
and then it comes back and it binds to some stuff.


00:30:47.880 --> 00:30:51.880
There's a bunch of network steps with built-in latency there.


00:30:51.880 --> 00:30:53.380
Exactly.


00:30:53.380 --> 00:30:57.860
that is the pain point of all types of black box testing.


00:30:57.860 --> 00:31:00.300
There are inherent race conditions.


00:31:00.300 --> 00:31:03.940
And when you do test automation in that type of space,


00:31:03.940 --> 00:31:06.900
then you need to handle appropriate waiting


00:31:06.900 --> 00:31:10.140
for those race conditions or else your test will be flaky.


00:31:10.140 --> 00:31:12.900
And so in that sense, Selenium WebDriver,


00:31:12.900 --> 00:31:15.300
the tool does get a bad rap for being flaky


00:31:15.300 --> 00:31:18.160
when it's not WebDriver itself, 99% of the time,


00:31:18.160 --> 00:31:20.420
it's actually the tests written using WebDriver


00:31:20.420 --> 00:31:22.940
that don't have those explicit weights in there.


00:31:22.940 --> 00:31:25.700
- Sure, yeah, but on the other hand,


00:31:25.700 --> 00:31:28.940
like the tool gets used in the way


00:31:28.940 --> 00:31:31.180
that the tool encourages itself to be used.


00:31:31.180 --> 00:31:32.260
- Exactly.


00:31:32.260 --> 00:31:33.380
- Yeah.


00:31:33.380 --> 00:31:35.860
- Exactly, and so that's exactly where I was going,


00:31:35.860 --> 00:31:40.340
because when you see some method driver.click,


00:31:40.340 --> 00:31:43.260
you as the programmer expect it to click


00:31:43.260 --> 00:31:45.300
and kind of wait for things, right?


00:31:45.300 --> 00:31:47.580
- Click the button, nope.


00:31:47.580 --> 00:31:50.660
- No, no, and so, because it's like,


00:31:51.620 --> 00:31:53.780
from experience working on many of these types


00:31:53.780 --> 00:31:56.740
of test automation projects across all languages and tools,


00:31:56.740 --> 00:32:01.820
when people are automating their tests,


00:32:01.820 --> 00:32:03.180
waiting is something that a lot of times


00:32:03.180 --> 00:32:04.740
they just don't even think of, right?


00:32:04.740 --> 00:32:06.900
Especially when they're newer to it,


00:32:06.900 --> 00:32:08.940
whether that is a manual tester


00:32:08.940 --> 00:32:10.740
who's learning automation for the first time


00:32:10.740 --> 00:32:14.540
or a developer who's crossing over to automate some tests.


00:32:14.540 --> 00:32:16.460
- Yeah, well, maybe you're just testing


00:32:16.460 --> 00:32:20.660
your local dev machine running on a local dev server


00:32:20.660 --> 00:32:22.860
where there's no network latency.


00:32:22.860 --> 00:32:25.380
And then you go and test against your


00:32:25.380 --> 00:32:29.220
microservice deployed cloud CDN thing.


00:32:29.220 --> 00:32:31.580
And it just doesn't behave the same, right?


00:32:31.580 --> 00:32:32.420
- Yes.


00:32:32.420 --> 00:32:33.240
- It could have been working and working,


00:32:33.240 --> 00:32:35.220
working, working, and now it's flaky.


00:32:35.220 --> 00:32:36.660
- Yep, exactly.


00:32:36.660 --> 00:32:38.800
And so with that in mind,


00:32:38.800 --> 00:32:41.860
with Selenium being that low level kind of tool,


00:32:41.860 --> 00:32:44.180
I mean, I've even talked and heard


00:32:44.180 --> 00:32:45.580
from the Selenium people on this,


00:32:45.580 --> 00:32:48.860
their thought is WebDriver is meant to be a low level tool


00:32:48.860 --> 00:32:52.700
that you have to handle all those things yourself.


00:32:52.700 --> 00:32:53.820
And they even encourage you,


00:32:53.820 --> 00:32:57.300
you have layers and frameworks on top of Selenium


00:32:57.300 --> 00:33:00.140
that will handle that kind of stuff for your needs.


00:33:00.140 --> 00:33:02.020
In fact, at my previous company,


00:33:02.020 --> 00:33:04.220
I created an open source project in C#


00:33:04.220 --> 00:33:05.460
called Boa Constrictor,


00:33:05.460 --> 00:33:08.500
which is a .NET implementation of a pattern


00:33:08.500 --> 00:33:10.100
to handle those kinds of things.


00:33:10.100 --> 00:33:14.660
And like in Java, you have Serenity BDD,


00:33:14.660 --> 00:33:16.060
which has a layer over it like that.


00:33:16.060 --> 00:33:17.860
There's something called Selenide.


00:33:17.860 --> 00:33:20.980
There's tons of different little projects out there.


00:33:20.980 --> 00:33:22.820
>> Sure. Interesting.


00:33:22.820 --> 00:33:25.820
>> But compared to Playwright,


00:33:25.820 --> 00:33:31.620
Playwright is not a low-level interaction tool.


00:33:31.620 --> 00:33:34.040
Playwright is meant to be more modern,


00:33:34.040 --> 00:33:35.800
more refined, more high-level,


00:33:35.800 --> 00:33:37.700
more do things for you,


00:33:37.700 --> 00:33:40.140
where the framework is there to help you.


00:33:40.140 --> 00:33:43.840
So when it comes to waiting,


00:33:43.840 --> 00:33:47.380
most of the time that you need to do waiting in Playwright,


00:33:47.380 --> 00:33:49.740
Playwright handles it for you automatically.


00:33:49.740 --> 00:33:52.900
So for any single interaction where you are interacting


00:33:52.900 --> 00:33:56.340
with an element, depending on that type of interaction,


00:33:56.340 --> 00:33:59.340
there is a specific kind of weight automatically built in


00:33:59.340 --> 00:34:01.340
for that element, that target element


00:34:01.340 --> 00:34:04.060
to be ready before it does anything with it.


00:34:04.060 --> 00:34:06.220
So before you go to click an element,


00:34:06.220 --> 00:34:08.040
Playwright's going to be like, whoa, whoa, whoa, let's


00:34:08.040 --> 00:34:10.780
wait about five seconds until it appears on the page.


00:34:10.780 --> 00:34:13.300
And once that thing appears, it's a smart wait.


00:34:13.300 --> 00:34:16.220
So boom, it'll dive in and do it then.


00:34:16.220 --> 00:34:19.300
So you don't have that flakiness that pervades


00:34:19.300 --> 00:34:20.620
of the older test.


00:34:20.620 --> 00:34:21.460
- It's so good.


00:34:21.460 --> 00:34:24.100
And when your tests are flaky, then you just,


00:34:24.100 --> 00:34:26.780
doesn't matter if it fails, whatever, it fails sometimes.


00:34:26.780 --> 00:34:27.620
Right?


00:34:27.620 --> 00:34:28.660
As opposed to, oh no, the test failed.


00:34:28.660 --> 00:34:29.500
What happened?


00:34:29.500 --> 00:34:30.320
What went wrong?


00:34:30.320 --> 00:34:33.700
You wanna have a lot of faith and trust


00:34:33.700 --> 00:34:36.340
that a broken build means something


00:34:36.340 --> 00:34:38.820
or a failed test means something.


00:34:38.820 --> 00:34:40.660
Before we dive in too much to playwright,


00:34:40.660 --> 00:34:43.300
just a couple of questions that I think are out there


00:34:43.300 --> 00:34:45.060
that are interesting, worth covering.


00:34:45.060 --> 00:34:49.560
Dave Sharp says, "I use Selenium for some headless browser tests and automations.


00:34:49.560 --> 00:34:51.260
Is that possible with Playwright?"


00:34:51.260 --> 00:34:52.260
Yes.


00:34:52.260 --> 00:34:54.760
Yeah, yeah, so real similar.


00:34:54.760 --> 00:34:58.360
I think the API is probably a little cleaner as well, as we'll see in a minute.


00:34:58.360 --> 00:34:59.360
Mm-hmm.


00:34:59.360 --> 00:35:04.060
Then Micah also says, "Absolutely can recommend Playwright.


00:35:04.060 --> 00:35:08.160
In the robot framework side, browser library is built on Playwright


00:35:08.160 --> 00:35:10.560
and Selenium library on top of Selenium.


00:35:10.560 --> 00:35:12.160
Faster and just makes sense."


00:35:12.160 --> 00:35:14.260
Interesting. Very cool.


00:35:14.260 --> 00:35:16.060
Yeah, very cool.


00:35:16.060 --> 00:35:19.700
All right, well, we've talked about some of these differences


00:35:19.700 --> 00:35:20.200
and stuff.


00:35:20.200 --> 00:35:24.220
Let's maybe just highlight some of the--


00:35:24.220 --> 00:35:27.300
you've introduced it pretty well-- cross-browser,


00:35:27.300 --> 00:35:30.060
because it does Chromium, WebKit, and Firefox.


00:35:30.060 --> 00:35:31.560
And when you say Chromium these days,


00:35:31.560 --> 00:35:35.420
you're like 96% of all the browsers, sadly.


00:35:35.420 --> 00:35:37.380
But that covers a lot, right?


00:35:37.380 --> 00:35:40.140
That's not just testing for Chrome,


00:35:40.140 --> 00:35:44.940
whether that's testing for Edge, Brave, Vivaldi, et cetera,


00:35:44.940 --> 00:35:48.140
et cetera, cross-platform.


00:35:48.140 --> 00:35:49.020
Go ahead.


00:35:49.020 --> 00:35:49.940
- I wanna go back to browser


00:35:49.940 --> 00:35:52.260
'cause there is an interesting difference here


00:35:52.260 --> 00:35:56.220
to note between Selenium and Playwright.


00:35:56.220 --> 00:35:57.220
When you use Selenium,


00:35:57.220 --> 00:35:59.580
you're testing the full browsers, right?


00:35:59.580 --> 00:36:00.620
You're testing Google Chrome,


00:36:00.620 --> 00:36:02.260
you're testing Mozilla Firefox.


00:36:02.260 --> 00:36:04.560
- Does it even load up with like extensions


00:36:04.560 --> 00:36:07.060
and stuff like that, or is it just, is it more bare,


00:36:07.060 --> 00:36:09.700
is it maybe just below your customizations?


00:36:09.700 --> 00:36:13.860
So in Selenium, it's the full browser, whatever you've got.


00:36:13.860 --> 00:36:17.260
You can do things from a command line to kind of like play with


00:36:17.260 --> 00:36:21.260
certain things like what user profile you use, what user data directing and all that.


00:36:21.260 --> 00:36:26.060
But essentially, the browser that's installed on your machine is what Selenium WebDriver would use.


00:36:26.060 --> 00:36:29.860
But in Playwright, it doesn't use those "stock browsers."


00:36:29.860 --> 00:36:32.100
Playwright uses browser projects.


00:36:32.100 --> 00:36:35.140
So with Playwright, you are not testing Google Chrome,


00:36:35.140 --> 00:36:37.940
you are literally testing the Chromium project.


00:36:37.940 --> 00:36:40.100
You're not testing Mozilla Firefox,


00:36:40.100 --> 00:36:42.340
you're testing the open source Firefox project.


00:36:42.340 --> 00:36:44.300
You're not testing Apple Safari,


00:36:44.300 --> 00:36:46.940
you're testing the WebKit project.


00:36:46.940 --> 00:36:49.980
When you go to set up and install Playwright,


00:36:49.980 --> 00:36:52.260
part of the Playwright install command is it will


00:36:52.260 --> 00:36:53.580
download the latest versions of


00:36:53.580 --> 00:36:56.300
these browser projects and install them on your machine.


00:36:56.300 --> 00:36:59.780
When Playwright runs, it's running again those.


00:36:59.780 --> 00:37:02.620
>> In a sense, it's a more pure stripped down,


00:37:02.620 --> 00:37:05.600
just the essence of the rendering engine,


00:37:05.600 --> 00:37:07.340
JavaScript VM and stuff.


00:37:07.340 --> 00:37:09.340
Exactly. Exactly.


00:37:09.340 --> 00:37:11.340
Okay. That's really nice.


00:37:11.340 --> 00:37:13.340
It's an opinionated take.


00:37:13.340 --> 00:37:16.140
You seem to have a very positive view of that, Michael.


00:37:16.140 --> 00:37:18.140
I do.


00:37:18.140 --> 00:37:20.140
Yes. I think it's cool. I think it's awesome.


00:37:20.140 --> 00:37:22.140
I think it's lighter weight.


00:37:22.140 --> 00:37:26.540
But I would also caveat that it may not be usable in all contexts.


00:37:26.540 --> 00:37:29.940
Like if you are a government contractor


00:37:29.940 --> 00:37:31.940
or you're working at some big bank


00:37:31.940 --> 00:37:34.340
or some of these older, more legacy shops,


00:37:34.340 --> 00:37:36.340
they may have very strict requirements on


00:37:36.340 --> 00:37:38.340
browsers and versions to test.


00:37:38.340 --> 00:37:40.340
It's out there, it exists.


00:37:40.340 --> 00:37:42.340
And so...


00:37:42.340 --> 00:37:44.340
Or they may want IE 11


00:37:44.340 --> 00:37:46.340
and you've got to just run that because


00:37:46.340 --> 00:37:48.340
their crummy SharePoint


00:37:48.340 --> 00:37:50.340
installation from 10 years ago


00:37:50.340 --> 00:37:52.340
they're unwilling to upgrade, like won't let


00:37:52.340 --> 00:37:54.340
anything but that log into it or


00:37:54.340 --> 00:37:56.340
some weird thing like that, right?


00:37:56.340 --> 00:37:58.340
Exactly. So anything


00:37:58.340 --> 00:38:00.340
like that may be a showstopper for


00:38:00.340 --> 00:38:02.340
folks who want to use Playwright.


00:38:02.340 --> 00:38:04.340
My gut tells me that's a very, very small


00:38:04.340 --> 00:38:07.780
of the wider industry, but it is something to call it.


00:38:07.780 --> 00:38:09.260
- Yeah, sure.


00:38:09.260 --> 00:38:11.340
And so kind of modern web browsers


00:38:11.340 --> 00:38:12.740
is where you're gonna end up.


00:38:12.740 --> 00:38:14.300
- Yes, exactly, exactly.


00:38:14.300 --> 00:38:15.140
- Sure.


00:38:15.140 --> 00:38:21.100
Okay, across platform, Windows, Linux, Mac plus CI,


00:38:21.100 --> 00:38:25.100
head-ed, headed and headless.


00:38:25.100 --> 00:38:28.220
That was sort of touched upon in Dave's question,


00:38:28.220 --> 00:38:31.940
but maybe discuss this headless versus headed idea


00:38:31.940 --> 00:38:34.220
of this, these types of frameworks.


00:38:34.220 --> 00:38:35.060
- Sure, sure.


00:38:35.060 --> 00:38:38.500
So when you're the human and you open up your browser,


00:38:38.500 --> 00:38:40.100
that's headed mode.


00:38:40.100 --> 00:38:41.180
Why is it called headed mode?


00:38:41.180 --> 00:38:42.620
Because it's rendering in front of you


00:38:42.620 --> 00:38:43.980
and it's doing all that fun stuff


00:38:43.980 --> 00:38:45.460
and you can see it visibly on the screen


00:38:45.460 --> 00:38:47.420
or in whatever viewport you've got.


00:38:47.420 --> 00:38:51.680
Headless mode is a way that you can run browsers


00:38:51.680 --> 00:38:53.980
without having it pop up on the screen


00:38:53.980 --> 00:38:54.820
and render all that stuff.


00:38:54.820 --> 00:38:55.820
It'll still do the rendering,


00:38:55.820 --> 00:38:58.780
it just won't graphically display that to you.


00:38:58.780 --> 00:39:02.300
When you run automated tests,


00:39:02.300 --> 00:39:05.020
specifically in a continuous integration environment,


00:39:05.020 --> 00:39:07.300
maybe in a GitHub Action or something,


00:39:07.300 --> 00:39:09.300
you want to run headless mode.


00:39:09.300 --> 00:39:09.820
Why?


00:39:09.820 --> 00:39:11.380
Because it uses fewer resources.


00:39:11.380 --> 00:39:13.060
It's a little bit faster.


00:39:13.060 --> 00:39:15.580
Nobody is there to look at the screen when it pops up.


00:39:15.580 --> 00:39:17.100
>>It's got a button.


00:39:17.100 --> 00:39:19.740
Would you like to upgrade?


00:39:19.740 --> 00:39:21.740
Chrome is great, but you should try Edge.


00:39:21.740 --> 00:39:23.820
It has these new shopping-- no, I don't want that.


00:39:23.820 --> 00:39:24.320
Go away.


00:39:24.320 --> 00:39:25.380
I'm kidding those things.


00:39:25.380 --> 00:39:26.140
>>Yeah, yeah.


00:39:26.140 --> 00:39:27.980
>>I know, that wouldn't happen in the project.


00:39:27.980 --> 00:39:29.620
That might be more of a Selenium thing,


00:39:29.620 --> 00:39:32.940
You get these weird, typically periodic pop-ups


00:39:32.940 --> 00:39:34.540
from the browser vendors.


00:39:34.540 --> 00:39:35.380
- Indeed.


00:39:35.380 --> 00:39:38.580
I mean, when headless modes first became popular,


00:39:38.580 --> 00:39:40.420
I wanna say about like five years ago,


00:39:40.420 --> 00:39:43.060
like it really became popular with PhantomJS,


00:39:43.060 --> 00:39:44.780
and then Chrome basically came along,


00:39:44.780 --> 00:39:47.860
did the same thing and killed PhantomJS project.


00:39:47.860 --> 00:39:50.820
The dude's just like, I'm done, use Chrome instead.


00:39:50.820 --> 00:39:52.820
Like TLDR on the GitHub repo.


00:39:52.820 --> 00:39:53.660
- Wow.


00:39:53.660 --> 00:39:55.060
- Now all the (indistinct)


00:39:55.060 --> 00:39:56.980
But it is a recommended practice


00:39:56.980 --> 00:39:58.780
that when you're running tests for credit,


00:39:58.780 --> 00:40:01.140
like in CI or something, you do headless mode.


00:40:01.140 --> 00:40:03.180
Also, if you try to do headed mode


00:40:03.180 --> 00:40:05.620
in certain CI tools or GitHub Actions,


00:40:05.620 --> 00:40:07.180
sometimes you might get these wonky errors


00:40:07.180 --> 00:40:09.660
like you couldn't render this thing.


00:40:09.660 --> 00:40:13.260
- Yeah, or maybe like the desktop UI tools


00:40:13.260 --> 00:40:16.180
or frameworks are not set up to actually show Windows


00:40:16.180 --> 00:40:17.020
or some weird thing.


00:40:17.020 --> 00:40:18.220
- Yep, yep.


00:40:18.220 --> 00:40:20.860
- But headed, you might wanna see what happened.


00:40:20.860 --> 00:40:22.740
Like if something goes wrong.


00:40:22.740 --> 00:40:26.020
- So you would use headed mode


00:40:26.020 --> 00:40:30.360
when you are developing the test automation on your workbench.


00:40:30.360 --> 00:40:33.520
Like, I've got Visual Studio Code open,


00:40:33.520 --> 00:40:35.020
and I just code my test.


00:40:35.020 --> 00:40:36.100
I want to run it real quick.


00:40:36.100 --> 00:40:38.560
I want to see it pop up and dance through the page.


00:40:38.560 --> 00:40:40.100
That's when I would use headed mode.


00:40:40.100 --> 00:40:43.180
>>Sure.


00:40:43.180 --> 00:40:46.960
>>Also, interesting thing, I believe by default,


00:40:46.960 --> 00:40:49.420
Playwright uses headless mode.


00:40:49.420 --> 00:40:51.060
It's not something that you have to--


00:40:51.060 --> 00:40:53.300
>>Yes, I think you're right about that as well.


00:40:53.300 --> 00:40:54.900
- Yeah, if you want a headed mode,


00:40:54.900 --> 00:40:57.980
you gotta headed, headless equals false


00:40:57.980 --> 00:41:00.180
or headed equals, I don't know, we'll see it in a second.


00:41:00.180 --> 00:41:02.960
We'll get to the examples, but you gotta opt in.


00:41:02.960 --> 00:41:05.180
- Correct.


00:41:05.180 --> 00:41:08.460
- And then you already mentioned the Playwright API


00:41:08.460 --> 00:41:11.340
is TypeScript, JavaScript, Python, .NET, and Java.


00:41:11.340 --> 00:41:15.380
And people are like, "Ah, I'm not using it, it's not Python."


00:41:15.380 --> 00:41:17.460
Well, the browsers aren't Python anyway,


00:41:17.460 --> 00:41:19.500
so it's just like one more layer of


00:41:19.500 --> 00:41:21.140
who knows how many technologies are in there.


00:41:21.140 --> 00:41:24.820
but like NumPy has a C layer,


00:41:24.820 --> 00:41:28.660
this is like a layer to talk to the thing that does the work.


00:41:28.660 --> 00:41:31.420
And it's a pretty nice API,


00:41:31.420 --> 00:41:32.700
as we're gonna see in a moment.


00:41:32.700 --> 00:41:34.660
And then you can also test mobile web,


00:41:34.660 --> 00:41:36.740
even if you don't have a mobile web thing,


00:41:36.740 --> 00:41:39.460
'cause it has native mobile emulation, yeah?


00:41:39.460 --> 00:41:40.300
- Correct.


00:41:40.300 --> 00:41:41.900
That's all viewport size,


00:41:41.900 --> 00:41:45.580
some of the little options on whatever request it has,


00:41:45.580 --> 00:41:47.460
just to kind of somewhat emulate


00:41:47.460 --> 00:41:49.580
what a mobile browser would look like.


00:41:49.580 --> 00:41:50.940
- Yeah, very cool.


00:41:50.940 --> 00:41:54.780
Test like responsiveness and like a bootstrap menu or something.


00:41:54.780 --> 00:41:58.180
Auto weight, that sounds very promising.


00:41:58.180 --> 00:42:02.220
It waits for elements to be actionable prior to trying to click them.


00:42:02.220 --> 00:42:05.380
You already went into the flakiness and race conditions of all that,


00:42:05.380 --> 00:42:06.140
but that's pretty cool.


00:42:06.140 --> 00:42:08.580
Web first assertions.


00:42:08.580 --> 00:42:10.340
What does that mean?


00:42:10.340 --> 00:42:11.420
That sounds good.


00:42:11.420 --> 00:42:12.500
Cause you were testing your web.


00:42:12.500 --> 00:42:16.620
So that kind of goes hand in hand with auto weight.


00:42:17.340 --> 00:42:23.240
So for those of you who are familiar with unit testing


00:42:23.240 --> 00:42:25.740
in Python, whether that's with unit test or pytest,


00:42:25.740 --> 00:42:29.380
no, unit test has its assert that library.


00:42:29.380 --> 00:42:33.380
pytest, you literally just use the assert command in Python.


00:42:33.380 --> 00:42:36.100
Assert this, assert that, all that kind of stuff.


00:42:36.100 --> 00:42:40.380
When it comes to web testing, or really


00:42:40.380 --> 00:42:43.820
any sort of black box testing, the basic kind


00:42:43.820 --> 00:42:45.860
of assert statements can be limited.


00:42:45.860 --> 00:42:47.360
Again, because a lot of times you


00:42:47.360 --> 00:42:49.680
have to wait for the value to be ready


00:42:49.680 --> 00:42:52.580
before you can make a Boolean condition of an assertion


00:42:52.580 --> 00:42:53.640
on it.


00:42:53.640 --> 00:42:56.440
And so that's basically what these web-first assertions


00:42:56.440 --> 00:42:57.240
mean.


00:42:57.240 --> 00:43:00.280
In Playwright, there is an expect function.


00:43:00.280 --> 00:43:01.160
It's in JavaScript.


00:43:01.160 --> 00:43:01.960
It's in Python.


00:43:01.960 --> 00:43:03.440
I think it's in the others.


00:43:03.440 --> 00:43:05.920
But basically, you would say something like expect


00:43:05.920 --> 00:43:09.200
a certain locator to have a certain text value.


00:43:09.200 --> 00:43:12.320
And what it'll do is it'll wait until said phrase has


00:43:12.320 --> 00:43:15.720
that text value, or wait until this locator appears


00:43:15.720 --> 00:43:16.720
on the screen.


00:43:16.720 --> 00:43:20.400
And so it's a more fluent kind of way of writing assertions.


00:43:20.400 --> 00:43:22.560
And it also has that built-in waiting.


00:43:22.560 --> 00:43:24.800
And they call them web-first because it's the idea


00:43:24.800 --> 00:43:27.280
that it's putting the emphasis of the condition


00:43:27.280 --> 00:43:30.280
on the web elements as we would naturally understand them,


00:43:30.280 --> 00:43:33.440
not trying to shoehorn them into some fixed static Boolean


00:43:33.440 --> 00:43:34.840
condition.


00:43:34.840 --> 00:43:37.080
Yeah, that's very cool.


00:43:37.080 --> 00:43:40.640
OK, and then the last selling point on resiliency


00:43:40.640 --> 00:43:44.800
here is tracing, configure tests, retry strategies,


00:43:44.800 --> 00:43:49.400
capture execution traces, videos, and screenshots.


00:43:49.400 --> 00:43:51.380
So yeah, we'll see some of the tooling,


00:43:51.380 --> 00:43:53.200
the GUI tools and stuff for this,


00:43:53.200 --> 00:43:55.580
but yeah, this sounds really nice.


00:43:55.580 --> 00:44:00.880
If your test fails in CI and you get a video,


00:44:00.880 --> 00:44:04.560
they click there and then that gave a 400


00:44:04.560 --> 00:44:07.240
or something in JavaScript instead of filling up this form,


00:44:07.240 --> 00:44:09.080
like that sounds pretty nice.


00:44:09.080 --> 00:44:11.840
- Oh yeah, so yeah, and that's a huge advantage


00:44:11.840 --> 00:44:14.480
that Playwright has over Splendium as well.


00:44:14.480 --> 00:44:16.660
Like in Selenium, you can capture screenshots


00:44:16.660 --> 00:44:20.460
along the way, but there's no built-in video capture.


00:44:20.460 --> 00:44:23.900
In Playwright, you can not only get screenshots if you want,


00:44:23.900 --> 00:44:25.500
explicitly through the code.


00:44:25.500 --> 00:44:29.500
Implicitly, you slap on the screenshot command line


00:44:29.500 --> 00:44:30.000
argument.


00:44:30.000 --> 00:44:32.420
After every single failed test, it'll poop out a screenshot.


00:44:32.420 --> 00:44:34.620
Or you can just be like, give me the whole dang video


00:44:34.620 --> 00:44:36.940
so I can trace through and watch.


00:44:36.940 --> 00:44:38.860
I mean, screenshots are great.


00:44:38.860 --> 00:44:40.860
Video is lit.


00:44:40.860 --> 00:44:42.220
It's incredible.


00:44:42.220 --> 00:44:44.580
It's like, oh my gosh, they did it.


00:44:44.580 --> 00:44:48.940
They planted the flag, victory, this is amazing.


00:44:48.940 --> 00:44:51.460
- Yeah, yeah, because it's one thing to see it


00:44:51.460 --> 00:44:53.360
where you have it in headed mode and you can interact.


00:44:53.360 --> 00:44:55.260
It's another when it's on a remote system,


00:44:55.260 --> 00:44:56.820
maybe a different platform, and you're like,


00:44:56.820 --> 00:44:58.580
what went wrong with this thing, I don't know.


00:44:58.580 --> 00:45:01.420
- Exactly, 'cause that's the thing.


00:45:01.420 --> 00:45:05.060
In olden times, I kid you not, when people did automation,


00:45:05.060 --> 00:45:06.860
they would literally push the button on the machine


00:45:06.860 --> 00:45:09.380
and just watch it go and wait for it to finish,


00:45:09.380 --> 00:45:11.000
and that was automation.


00:45:11.000 --> 00:45:11.960
No, no, no, no, no.


00:45:11.960 --> 00:45:14.120
Like true automation is it's in some sort of CI system.


00:45:14.120 --> 00:45:16.760
You know, it runs on a, after every pull request,


00:45:16.760 --> 00:45:19.840
after every commit, or maybe if the test suite is too big,


00:45:19.840 --> 00:45:22.400
it runs nightly or, you know, a couple of times a week.


00:45:22.400 --> 00:45:24.800
You are not there to watch it fail, right?


00:45:24.800 --> 00:45:27.560
So you need all the evidence you can get.


00:45:27.560 --> 00:45:28.600
What's the best evidence?


00:45:28.600 --> 00:45:29.680
Video.


00:45:29.680 --> 00:45:30.840
Video to see what's happening,


00:45:30.840 --> 00:45:32.840
and then you dig into launch.


00:45:32.840 --> 00:45:35.200
- Yeah, I mean, your only visibility is spinning,


00:45:35.200 --> 00:45:37.600
spinning on CI and then failed, right?


00:45:37.600 --> 00:45:39.680
And so, yeah, it's really good.


00:45:39.680 --> 00:45:40.520
I love it.


00:45:40.520 --> 00:45:44.400
Okay, stuff about running on modern platforms,


00:45:44.400 --> 00:45:47.640
but then let's talk the isolation.


00:45:47.640 --> 00:45:48.760
I think that that's,


00:45:48.760 --> 00:45:51.880
there's two things about sort of authentication


00:45:51.880 --> 00:45:54.160
and cookies and stuff like that.


00:45:54.160 --> 00:45:55.360
It's pretty interesting.


00:45:55.360 --> 00:45:58.640
But then just also the isolation, right?


00:45:58.640 --> 00:46:02.120
You have this very much in testing, right?


00:46:02.120 --> 00:46:06.360
You don't want to depend on the order of tests,


00:46:06.360 --> 00:46:08.840
for example, at a unit test in this,


00:46:08.840 --> 00:46:13.040
you don't want to depend upon the last page you visited


00:46:13.040 --> 00:46:14.880
for browser tests.


00:46:14.880 --> 00:46:15.840
Yep.


00:46:15.840 --> 00:46:18.440
And specifically with the isolation


00:46:18.440 --> 00:46:21.200
in Playwright and the browser context here,


00:46:21.200 --> 00:46:24.560
you had mentioned earlier, Michael, about in Selenium


00:46:24.560 --> 00:46:27.120
how for every single test you would have to open a new


00:46:27.120 --> 00:46:29.600
browser, open a new WebDriver process,


00:46:29.600 --> 00:46:31.600
and then at the end of it, close it, close it.


00:46:31.600 --> 00:46:33.800
And the reason you do that, you open and close


00:46:33.800 --> 00:46:35.560
for every single test, is because you


00:46:35.560 --> 00:46:37.200
want that isolation.


00:46:37.200 --> 00:46:39.400
You don't want to share web browsers across tests


00:46:39.400 --> 00:46:42.000
because things can go wrong.


00:46:42.000 --> 00:46:44.480
With Playwright, one of the optimizations


00:46:44.480 --> 00:46:46.880
is for the entirety of your test suite,


00:46:46.880 --> 00:46:49.440
you do only have one browser process.


00:46:49.440 --> 00:46:51.720
So you only have one Chromium process.


00:46:51.720 --> 00:46:54.160
It's at the beginning of everything you started up,


00:46:54.160 --> 00:46:56.400
and it exists throughout all tests, and you close it.


00:46:56.400 --> 00:46:58.040
You're like, well, wait, doesn't that


00:46:58.040 --> 00:47:00.320
violate independence and isolation?


00:47:00.320 --> 00:47:02.700
What Playwright does is it creates what's called browser


00:47:02.700 --> 00:47:04.360
context out of that.


00:47:04.360 --> 00:47:08.480
- It's like a new private incognito window, sort of, right?


00:47:08.480 --> 00:47:10.400
- Yes, exactly.


00:47:10.400 --> 00:47:13.120
It's basically like your own session, your own window,


00:47:13.120 --> 00:47:14.840
your own user count kind of thing.


00:47:14.840 --> 00:47:19.120
Browser contacts are very quick to create and close.


00:47:19.120 --> 00:47:22.360
So you don't have the five second to 10 second


00:47:22.360 --> 00:47:24.160
startup and teardown time per test.


00:47:24.160 --> 00:47:25.480
It's like a split second.


00:47:25.480 --> 00:47:28.540
So that makes you be able to set up your test a lot faster.


00:47:28.540 --> 00:47:31.440
And it's basically, it's like an incognito session.


00:47:31.440 --> 00:47:34.120
So you have access to everything in your scope,


00:47:34.120 --> 00:47:38.220
But if there are other contexts running at the same time,


00:47:38.220 --> 00:47:40.220
e.g. you're running parallel tests,


00:47:40.220 --> 00:47:42.800
you can't access anything in the other sandbox.


00:47:42.800 --> 00:47:44.340
So it's safe.


00:47:44.340 --> 00:47:48.520
And it's really a game changer for browser-based testing.


00:47:48.520 --> 00:47:52.940
- And as you mentioned, just like I have a quick count,


00:47:52.940 --> 00:47:54.520
I think I have six browser tabs


00:47:54.520 --> 00:47:57.320
and a progressive web app open right now.


00:47:57.320 --> 00:47:59.620
They don't interact, right?


00:47:59.620 --> 00:48:01.060
I mean, that's just how browsers are built


00:48:01.060 --> 00:48:06.820
that if I visit playwright.dev and then some other--


00:48:06.820 --> 00:48:10.820
selenium.dev or whatever, they don't get a spy on each other.


00:48:10.820 --> 00:48:12.660
That's just how it works.


00:48:12.660 --> 00:48:14.260
And so it leverages that to say, well,


00:48:14.260 --> 00:48:15.980
we can do more than one tab at once.


00:48:15.980 --> 00:48:17.780
Let's go.


00:48:17.780 --> 00:48:18.860
Yep.


00:48:18.860 --> 00:48:22.420
And all of your authentication per browser context,


00:48:22.420 --> 00:48:25.620
any of the cookies you have protected by browser context.


00:48:25.620 --> 00:48:27.740
So you can do a lot of really cool stuff.


00:48:27.740 --> 00:48:29.820
It's not just you're on a different tab.


00:48:29.820 --> 00:48:32.820
because that comes down to pages off of browser context,


00:48:32.820 --> 00:48:35.820
which is another thing, but it's full context.


00:48:35.820 --> 00:48:37.820
- It's more isolation than that, yeah.


00:48:37.820 --> 00:48:38.820
- Yeah. - Yeah.


00:48:38.820 --> 00:48:40.820
Yeah, very cool.


00:48:40.820 --> 00:48:44.820
And then the last sort of selling point that Playwright talks about


00:48:44.820 --> 00:48:48.820
is that they have a bunch of tooling to go along and help you, right?


00:48:48.820 --> 00:48:50.820
We're going to talk about the API next and go see that.


00:48:50.820 --> 00:48:53.820
And the API is really nice, but sometimes you're like,


00:48:53.820 --> 00:48:55.820
"Oh, what is that CSS selector?"


00:48:55.820 --> 00:48:58.820
And I've been writing CSS selectors for many years,


00:48:58.820 --> 00:49:01.440
So it doesn't bother me, but I remember the beginning of like,


00:49:01.440 --> 00:49:04.820
what does it mean when there's the arrow versus not the arrow?


00:49:04.820 --> 00:49:08.180
Or does it need the space or not the space between the dot and the


00:49:08.180 --> 00:49:09.260
the preceding element?


00:49:09.260 --> 00:49:13.320
You're just like, Oh, you know, I'd rather just go hit me with a stick.


00:49:13.320 --> 00:49:14.180
I'm done working today.


00:49:14.180 --> 00:49:14.380
Right.


00:49:14.380 --> 00:49:15.620
I can't take this anymore.


00:49:15.620 --> 00:49:17.100
I'm pulling my hair out.


00:49:17.100 --> 00:49:24.640
So, there's some tools like a code gen sort of record my interactions


00:49:24.640 --> 00:49:28.640
and then generate Python or other language, I guess, for me, that'll


00:49:28.640 --> 00:49:29.760
That'll help a lot there, right?


00:49:29.760 --> 00:49:32.280
So maybe we could talk a bit about really high level,


00:49:32.280 --> 00:49:33.920
then we could like, we'll dive in,


00:49:33.920 --> 00:49:35.480
post some pictures about it a little bit.


00:49:35.480 --> 00:49:37.000
- Sure, sure.


00:49:37.000 --> 00:49:38.720
Yeah, I mean, it's basically that like,


00:49:38.720 --> 00:49:40.360
it fires up a browser, you click through,


00:49:40.360 --> 00:49:43.960
you say I'm done, and then poofs out all the stuff you did.


00:49:43.960 --> 00:49:45.920
- Yeah, well, you talked about it using the dev tools.


00:49:45.920 --> 00:49:49.040
It's very much like the inspect element of the dev tools.


00:49:49.040 --> 00:49:49.880
- Yep.


00:49:49.880 --> 00:49:52.280
- Okay.


00:49:52.280 --> 00:49:54.800
And then there's an inspector, a similar,


00:49:54.800 --> 00:49:57.040
but also kind of like lets you step through


00:49:57.040 --> 00:49:59.120
and a trace viewer as well.


00:49:59.120 --> 00:50:01.040
That's a little bit like the network tab, I guess,


00:50:01.040 --> 00:50:03.520
plus snapshots.


00:50:03.520 --> 00:50:04.600
- Yeah, yeah.


00:50:04.600 --> 00:50:07.280
So trace viewer is something that you would kind of


00:50:07.280 --> 00:50:08.760
put on a test for monitoring


00:50:08.760 --> 00:50:10.760
and then it poops out all the logs and stuff


00:50:10.760 --> 00:50:13.240
so you can kind of better trace through it


00:50:13.240 --> 00:50:14.920
after the test is done.


00:50:14.920 --> 00:50:17.000
- Live DOM snapshots and all that good stuff.


00:50:17.000 --> 00:50:19.000
Okay, cool.


00:50:19.000 --> 00:50:21.760
So let's maybe talk through some of the code


00:50:21.760 --> 00:50:22.920
and how it works.


00:50:22.920 --> 00:50:27.240
Install, easy, know it, love it, pip install it.


00:50:27.240 --> 00:50:30.000
But it looks like there's two steps.


00:50:30.000 --> 00:50:33.040
I pip install playwright and then I playwright install.


00:50:33.040 --> 00:50:34.920
- Yes, yes, so pip install playwright


00:50:34.920 --> 00:50:38.320
is what's gonna give you the Python playwright package.


00:50:38.320 --> 00:50:39.800
I know that's a lot of Ps.


00:50:39.800 --> 00:50:41.440
What playwright install does


00:50:41.440 --> 00:50:43.560
is it installs those browser projects,


00:50:43.560 --> 00:50:45.740
Chromium, Firefox, and WebKit.


00:50:45.740 --> 00:50:48.000
- Right, okay.


00:50:48.000 --> 00:50:51.080
You can also, I think you can do playwright install Chromium


00:50:51.080 --> 00:50:52.040
if you want just one, right?


00:50:52.040 --> 00:50:53.400
you can focus on. - Correct.


00:50:53.400 --> 00:50:54.240
- You don't have to take it all.


00:50:54.240 --> 00:50:56.400
- You can pick the one to install.


00:50:56.400 --> 00:50:58.440
- Yeah, but it's 2020, just install them all.


00:50:58.440 --> 00:50:59.280
Let it happen.


00:50:59.280 --> 00:51:00.800
(laughing)


00:51:00.800 --> 00:51:02.420
- One other thing that if you're in Python,


00:51:02.420 --> 00:51:04.120
I would strongly recommend you include


00:51:04.120 --> 00:51:07.180
would be pip install playwright pytest,


00:51:07.180 --> 00:51:09.520
which is the pytest plugin for playwright.


00:51:09.520 --> 00:51:11.120
Again, plop, plop, plop, plop.


00:51:11.120 --> 00:51:12.040
(laughing)


00:51:12.040 --> 00:51:15.720
The playwright package alone


00:51:15.720 --> 00:51:18.000
is going to be the browser automation tool.


00:51:18.000 --> 00:51:20.420
The pytest plugin for playwright


00:51:20.420 --> 00:51:25.420
is what gives you all the tie-ins to pytest


00:51:25.420 --> 00:51:27.960
so you can make really nice tests.


00:51:27.960 --> 00:51:31.820
It gives you the command options like that head-headed option


00:51:31.820 --> 00:51:34.300
or the video option.


00:51:34.300 --> 00:51:36.380
It gives you the fixtures for getting the context


00:51:36.380 --> 00:51:37.380
and the page.


00:51:37.380 --> 00:51:39.860
So if you're going to be using it for testing,


00:51:39.860 --> 00:51:44.340
definitely Python, Playwright, plus pytest, amazing combo.


00:51:44.340 --> 00:51:46.460
- Cool, if you're just doing pure automation,


00:51:46.460 --> 00:51:51.460
maybe you don't need the pytest plugins and so on.


00:51:51.460 --> 00:51:53.380
Yeah, cool.


00:51:53.380 --> 00:51:56.300
Okay, so we've installed it.


00:51:56.300 --> 00:52:00.860
And then immediately what might catch your eye


00:52:00.860 --> 00:52:05.300
is when I import, I import playwright.


00:52:05.300 --> 00:52:07.740
Either sync API or async API,


00:52:07.740 --> 00:52:11.660
and you're like, oh, wait, there's two APIs, how lovely.


00:52:11.660 --> 00:52:15.540
But maybe talk us through what the code,


00:52:15.540 --> 00:52:17.300
keep in mind it's audio, but give us a sense of


00:52:17.300 --> 00:52:19.620
what does it feel like to write code for the sync API?


00:52:19.620 --> 00:52:21.600
Then we can see how it changes with async.


00:52:21.600 --> 00:52:22.440
- Sure, sure.


00:52:22.440 --> 00:52:26.460
So with the sync API, of course, everything is step-by-step.


00:52:26.460 --> 00:52:28.700
It waits before it goes on to the next thing.


00:52:28.700 --> 00:52:33.060
I would say if you're doing test automation in Python,


00:52:33.060 --> 00:52:34.660
the sync API is the way to go.


00:52:34.660 --> 00:52:37.460
And in fact, that height fixture I mentioned


00:52:37.460 --> 00:52:38.740
gives you everything sync.


00:52:38.740 --> 00:52:41.900
You would use async if you're doing more


00:52:41.900 --> 00:52:43.260
just rogue automation.


00:52:43.260 --> 00:52:45.900
You're trying to sign up for your college courses.


00:52:45.900 --> 00:52:48.740
That would be when you would use the Async API.


00:52:48.740 --> 00:52:51.460
So in this little snippet, what it's doing here


00:52:51.460 --> 00:52:58.620
is with Sync API, you're saying browser equals p Chromium


00:52:58.620 --> 00:52:59.260
launch.


00:52:59.260 --> 00:53:03.460
That's opening up a Chromium browser instance for Playwright.


00:53:03.460 --> 00:53:04.780
So that's the full browser.


00:53:04.780 --> 00:53:07.380
That's the start of the browser process.


00:53:07.380 --> 00:53:12.060
Then off of that, the next line, page equals browser.newPage,


00:53:12.060 --> 00:53:15.520
What it's saying there is from that browser instance,


00:53:15.520 --> 00:53:18.320
create a-- under the hood, this is not included here,


00:53:18.320 --> 00:53:20.200
but create a new browser context.


00:53:20.200 --> 00:53:23.160
And from that browser context, create a new page


00:53:23.160 --> 00:53:25.520
and give me the page object.


00:53:25.520 --> 00:53:27.600
All of the interactions in Playwright


00:53:27.600 --> 00:53:30.560
are going to be going off of that page.


00:53:30.560 --> 00:53:33.040
So if you want to click, if you want to scrape,


00:53:33.040 --> 00:53:34.840
if you want to send text, all that


00:53:34.840 --> 00:53:38.320
is going to be on the page.


00:53:38.320 --> 00:53:42.280
So following that, the next line is the first call


00:53:42.280 --> 00:53:45.320
we see, page.go to some web address,


00:53:45.320 --> 00:53:48.120
http://playwright.dev.


00:53:48.120 --> 00:53:51.600
So that would be an example of a browser interaction


00:53:51.600 --> 00:53:54.000
on the page.


00:53:54.000 --> 00:53:56.880
That one, because that will load the web page.


00:53:56.880 --> 00:53:59.080
It's directly off the page.


00:53:59.080 --> 00:54:01.560
A lot of times, you might need to say page.locator


00:54:01.560 --> 00:54:06.400
with your CSS selector, path ID, to identify


00:54:06.400 --> 00:54:09.440
an element on the page and then do something on the element.


00:54:09.440 --> 00:54:12.640
So you would say page locator, blah, blah, blah, dot click.


00:54:12.640 --> 00:54:15.880
Page locator dot fill with certain text.


00:54:15.880 --> 00:54:17.240
That would be like typing text.


00:54:17.240 --> 00:54:18.440
- Right, okay.


00:54:18.440 --> 00:54:19.280
Yep, yep.


00:54:19.280 --> 00:54:21.000
- Then the next one--


00:54:21.000 --> 00:54:24.080
- You can access properties like page.title, right?


00:54:24.080 --> 00:54:27.100
- Oh yeah, you can get page title, you can get page URL.


00:54:27.100 --> 00:54:29.400
I don't know the exact names of everything,


00:54:29.400 --> 00:54:34.400
but if you're using a Visual Studio code and Python typing,


00:54:34.480 --> 00:54:37.000
then you can get autocomplete and find the whole list.


00:54:37.000 --> 00:54:37.840
Beautiful.


00:54:37.840 --> 00:54:39.640
- Yeah, yeah, it's awesome.


00:54:39.640 --> 00:54:41.720
So another thing it seems like I could do here


00:54:41.720 --> 00:54:45.720
is we've got p.chromium, p.webkit, I presume, and so on.


00:54:45.720 --> 00:54:49.320
I could use a parameterized pytest test


00:54:49.320 --> 00:54:53.580
and give it the browser, do it for Chromium.


00:54:53.580 --> 00:54:54.420
Do you think?


00:54:54.420 --> 00:54:56.600
- okay. - No?


00:54:56.600 --> 00:54:57.440
Could I?


00:54:57.440 --> 00:54:59.120
How do I just test all the browsers?


00:54:59.120 --> 00:55:00.480
- Two things here, two things here.


00:55:00.480 --> 00:55:03.120
First of all, what you just recommended is an anti-pattern.


00:55:03.120 --> 00:55:04.920
You're never going to use Python's parameters


00:55:04.920 --> 00:55:05.960
to choose browser.


00:55:05.960 --> 00:55:08.280
Browser is a browser choice.


00:55:08.280 --> 00:55:10.440
Browser choice is a test control input.


00:55:10.440 --> 00:55:12.600
That's something that you want the user to specify,


00:55:12.600 --> 00:55:14.080
I want to target this browser.


00:55:14.080 --> 00:55:17.040
And the way you would want to treat that is to say, OK,


00:55:17.040 --> 00:55:18.520
I have my whole test suite.


00:55:18.520 --> 00:55:21.280
Honestly, all web UI tests should


00:55:21.280 --> 00:55:22.740
be able to run against any browser.


00:55:22.740 --> 00:55:25.240
There's no reason one would test on Chromium versus Firefox


00:55:25.240 --> 00:55:25.840
or something.


00:55:25.840 --> 00:55:29.240
So you would want to say, hey, for this entire test


00:55:29.240 --> 00:55:32.200
run of these tests that I'm filtering in my suite,


00:55:32.200 --> 00:55:33.600
target Chromium.


00:55:33.600 --> 00:55:35.200
If you wanted to test on Firefox,


00:55:35.200 --> 00:55:36.520
you spin up another process and say,


00:55:36.520 --> 00:55:38.840
okay, run these and target Firefox, right?


00:55:38.840 --> 00:55:41.800
Test control input passed in and handled.


00:55:41.800 --> 00:55:42.640
Now you're probably thinking,


00:55:42.640 --> 00:55:45.040
oh, okay, so now I can use a pytest fixture


00:55:45.040 --> 00:55:48.200
to read an environment variable and pass it in that way.


00:55:48.200 --> 00:55:52.120
That's what the Playwright pytest plugin does for you.


00:55:52.120 --> 00:55:52.960
- Okay, nice.


00:55:52.960 --> 00:55:54.480
Yeah, we'll get to that in a second, awesome.


00:55:54.480 --> 00:55:55.720
- Yeah, yeah, yeah.


00:55:55.720 --> 00:55:57.400
So that's why we use the plugin,


00:55:57.400 --> 00:56:00.000
it's because literally it's a command line option,


00:56:00.000 --> 00:56:03.840
you know, project Chromium, project Firefox.


00:56:03.840 --> 00:56:06.880
Or you can specify all of them and run three at a time.


00:56:06.880 --> 00:56:08.360
- Got it, okay, cool.


00:56:08.360 --> 00:56:11.640
And then there's a similar async API,


00:56:11.640 --> 00:56:14.400
but instead of using a with block to create


00:56:14.400 --> 00:56:20.080
the browser's sort of session up here, right?


00:56:20.080 --> 00:56:22.120
Instead of with sync playwright SP,


00:56:22.120 --> 00:56:25.800
we have, we create an async with block


00:56:25.800 --> 00:56:27.200
to create an async playwright.


00:56:27.200 --> 00:56:29.520
And then we await launching the browser,


00:56:29.520 --> 00:56:32.160
are launching the process and then await getting the page.


00:56:32.160 --> 00:56:34.760
And there's a lot of await on this page, honestly.


00:56:34.760 --> 00:56:37.000
This might be the most await-dense async thing


00:56:37.000 --> 00:56:40.280
I've ever seen in my life, which is not necessarily negative.


00:56:40.280 --> 00:56:41.480
But this is all await.


00:56:41.480 --> 00:56:43.280
It's like six lines of await.


00:56:43.280 --> 00:56:45.360
Yeah, no, you're absolutely right.


00:56:45.360 --> 00:56:47.560
In fact, right before our chat today,


00:56:47.560 --> 00:56:50.120
I was doing playwright in TypeScript.


00:56:50.120 --> 00:56:52.320
And yeah, it's await, await, await, await, await,


00:56:52.320 --> 00:56:53.620
all the way down.


00:56:53.620 --> 00:56:56.680
At least in Python, you get to choose.


00:56:56.680 --> 00:56:57.640
Yeah, true.


00:56:57.640 --> 00:57:00.760
- Yeah, JavaScript doesn't have the sync options.


00:57:00.760 --> 00:57:03.240
Yeah, so, but otherwise it's the same, right?


00:57:03.240 --> 00:57:05.800
So when would I use, when would, let me rephrase this,


00:57:05.800 --> 00:57:08.160
when would you use the async API?


00:57:08.160 --> 00:57:12.240
- So I would use the async API if I'm trying to do


00:57:12.240 --> 00:57:17.240
some sort of browser automation apart from test automation.


00:57:17.240 --> 00:57:19.760
Like if I'm trying to write a tool


00:57:19.760 --> 00:57:22.580
that's trying to log in and register for college courses,


00:57:22.580 --> 00:57:26.120
or I'm trying to scrape numbers off of a dashboard


00:57:26.120 --> 00:57:29.580
on a website that change every five minutes or something.


00:57:29.580 --> 00:57:31.420
That would be the case where I would probably write


00:57:31.420 --> 00:57:34.760
like a PY script and just puke everything in one file.


00:57:34.760 --> 00:57:36.980
And I would use the async API.


00:57:36.980 --> 00:57:39.140
I would use sync API for test automation.


00:57:39.140 --> 00:57:41.560
- Got it, okay.


00:57:41.560 --> 00:57:43.380
Would it make sense to use the async API


00:57:43.380 --> 00:57:46.960
if I was trying to run on all three browsers at once


00:57:46.960 --> 00:57:48.660
or would it still not go async?


00:57:48.660 --> 00:57:51.540
- Well-- - Maybe like an Xdist


00:57:51.540 --> 00:57:54.020
or something like that on my Py test.


00:57:54.020 --> 00:57:56.100
- That would not be the appropriate way to handle that.


00:57:56.100 --> 00:58:01.100
You would code your test, and it would be generic enough


00:58:01.100 --> 00:58:02.900
to run on any browser.


00:58:02.900 --> 00:58:07.400
And then when you would launch it using the pytest plugin,


00:58:07.400 --> 00:58:10.340
you would specify all three browsers to run


00:58:10.340 --> 00:58:13.740
at the same time, which would basically triple the test.


00:58:13.740 --> 00:58:16.900
And then you would use pytest xdisk-3,


00:58:16.900 --> 00:58:18.700
so it would parallelize that.


00:58:18.700 --> 00:58:19.540
- Right, perfect.


00:58:19.540 --> 00:58:21.740
- So you would test it if it's generic,


00:58:21.740 --> 00:58:23.380
and then you would use control options


00:58:23.380 --> 00:58:27.180
to parallelize and cross-browser type.


00:58:27.180 --> 00:58:29.100
- Yeah, probably the X-disk anyway.


00:58:29.100 --> 00:58:31.220
I don't know, you probably know.


00:58:31.220 --> 00:58:34.140
It's probably multi-process not threaded anyway, right?


00:58:34.140 --> 00:58:34.980
- Yes, yes.


00:58:34.980 --> 00:58:37.860
- Yeah, so it doesn't really matter if it's asynchronous.


00:58:37.860 --> 00:58:40.180
Okay, got it, got it, got it.


00:58:40.180 --> 00:58:43.940
And then here's the example of like how you might launch it


00:58:43.940 --> 00:58:46.460
in headed or not headed mode.


00:58:46.460 --> 00:58:50.600
You would say like firefox.launch headless equals false.


00:58:50.600 --> 00:58:52.220
There's another interesting parameter here,


00:58:52.220 --> 00:58:53.280
- Slow-mo.


00:58:53.280 --> 00:58:55.620
Don't you want your test to be fast?


00:58:55.620 --> 00:58:57.660
You went on and on about how it was good.


00:58:57.660 --> 00:59:02.180
- So when you are developing tests on your local workbench,


00:59:02.180 --> 00:59:04.140
and like I said before, that's when you wanna do headed


00:59:04.140 --> 00:59:05.500
because you wanna see it.


00:59:05.500 --> 00:59:07.020
Playwright is so fast that sometimes


00:59:07.020 --> 00:59:08.700
you can't track what's going on.


00:59:08.700 --> 00:59:10.020
- It's like, "Bzzz."


00:59:10.020 --> 00:59:11.100
Yeah.


00:59:11.100 --> 00:59:11.940
- It's fast.


00:59:11.940 --> 00:59:14.220
And so what you would wanna do during


00:59:14.220 --> 00:59:16.420
like your local development or debugging,


00:59:16.420 --> 00:59:19.740
you might want to inject a slowdown after every interaction.


00:59:19.740 --> 00:59:23.100
Usually I use like 1,000 or 2,000 milliseconds


00:59:23.100 --> 00:59:24.660
just to kind of--


00:59:24.660 --> 00:59:25.980
>>Yeah.


00:59:25.980 --> 00:59:29.500
>>Also, I would recommend just like with headless option,


00:59:29.500 --> 00:59:32.140
slow-mo option, you can use the command line.


00:59:32.140 --> 00:59:33.900
And I would even say that's the preferred way


00:59:33.900 --> 00:59:35.980
rather than injecting directly into code.


00:59:35.980 --> 00:59:37.860
>>Yeah.


00:59:37.860 --> 00:59:40.140
Probably also just to be nice,


00:59:40.140 --> 00:59:41.660
if you're not testing,


00:59:41.660 --> 00:59:45.940
but you're going around scraping on people's websites,


00:59:47.340 --> 00:59:49.700
don't hit it as fast as the network will allow you.


00:59:49.700 --> 00:59:53.220
- Oh yeah, 'cause some websites will identify you as a bot


00:59:53.220 --> 00:59:55.580
and be like, nope, I'm rejecting your request.


00:59:55.580 --> 00:59:58.700
So if you reject this promo, you seem more like a human,


00:59:58.700 --> 01:00:00.540
you'll skirt under the radar.


01:00:00.540 --> 01:00:01.940
Ooh, I didn't even know that.


01:00:01.940 --> 01:00:03.940
- Yeah, I'm sure that that actually,


01:00:03.940 --> 01:00:05.100
it may not be the intent.


01:00:05.100 --> 01:00:07.100
The intent is to make it human interactable,


01:00:07.100 --> 01:00:11.740
but it's still, it might be necessary.


01:00:11.740 --> 01:00:14.100
Getting that college course, get that 10 a.m. class,


01:00:14.100 --> 01:00:14.940
don't get banned.


01:00:14.940 --> 01:00:15.780
Okay.


01:00:15.780 --> 01:00:17.360
(laughing)


01:00:17.360 --> 01:00:19.680
I actually did do something like that when I was in college,


01:00:19.680 --> 01:00:21.840
but using a dial-up modem,


01:00:21.840 --> 01:00:24.200
'cause I had to talk to somebody, but it was glorious.


01:00:24.200 --> 01:00:28.240
I had the best class schedule that year.


01:00:28.240 --> 01:00:32.280
Okay, so another thing you can do is you can record scripts


01:00:32.280 --> 01:00:35.680
using Playwright, CodeGen, and then give it a URL,


01:00:35.680 --> 01:00:38.880
and then it'll watch you interact with it,


01:00:38.880 --> 01:00:40.440
and then generate Python


01:00:40.440 --> 01:00:42.520
to try to mimic those interactions, right?


01:00:45.400 --> 01:00:47.800
- Okay, that's pretty awesome.


01:00:47.800 --> 01:00:49.680
We talked a lot about,


01:00:49.680 --> 01:00:50.920
we'll come back to the pytest in a second.


01:00:50.920 --> 01:00:52.480
There's also a rebel mode,


01:00:52.480 --> 01:00:56.120
which is pretty, I mean, I guess that's just saying


01:00:56.120 --> 01:00:58.100
like you can call Python code in a rebel.


01:00:58.100 --> 01:01:00.340
That's not super interesting.


01:01:00.340 --> 01:01:04.980
- I mean, so if you're coming to Python


01:01:04.980 --> 01:01:08.480
from another ecosystem, this might be a big deal for you.


01:01:08.480 --> 01:01:09.440
I think for us, we're like,


01:01:09.440 --> 01:01:11.000
oh yeah, you can do any Python in a rebel,


01:01:11.000 --> 01:01:12.280
let's say, but whatever.


01:01:12.280 --> 01:01:14.000
So somebody comes from like the Java world,


01:01:14.000 --> 01:01:16.200
oh my gosh, it'll blow their mind, you know?


01:01:16.200 --> 01:01:17.400
- Yeah, that's for sure.


01:01:17.400 --> 01:01:20.480
I guess I'd never really thought about


01:01:20.480 --> 01:01:22.280
creating an async REPL,


01:01:22.280 --> 01:01:26.000
but you can create an async REPL using Python-M async IO,


01:01:26.000 --> 01:01:27.080
and then you get a REPL,


01:01:27.080 --> 01:01:29.640
but it lets you write a wait in it.


01:01:29.640 --> 01:01:30.800
I've never done that.


01:01:30.800 --> 01:01:32.360
So I guess I learned something.


01:01:32.360 --> 01:01:38.380
Then also it has this interesting way to build itself


01:01:38.380 --> 01:01:40.480
into a standalone executable,


01:01:40.480 --> 01:01:43.440
so you don't need Python or anything else to run it


01:01:43.440 --> 01:01:47.320
using PyInstaller, but like through some integrated command.


01:01:47.320 --> 01:01:50.360
Tell us about this, like I'm searching for a way


01:01:50.360 --> 01:01:52.480
in which this might be relevant to me.


01:01:52.480 --> 01:01:54.520
- Well, that would be like the tool that we mentioned


01:01:54.520 --> 01:01:57.160
versus a test automation suite, right?


01:01:57.160 --> 01:02:00.640
If you wanted to build your college course


01:02:00.640 --> 01:02:02.560
hacker scheduler thing.


01:02:02.560 --> 01:02:04.000
- I see.


01:02:04.000 --> 01:02:05.880
- Yep, you could build into it an executable


01:02:05.880 --> 01:02:08.640
and then it's a little easier to run, that's all.


01:02:08.640 --> 01:02:10.920
- I see, you tell it, it takes these command line arguments


01:02:10.920 --> 01:02:13.760
and then it goes and it.


01:02:13.760 --> 01:02:14.600
- Yep.


01:02:14.600 --> 01:02:15.920
- Okay, got it, if I wanna share it, sure.


01:02:15.920 --> 01:02:17.440
By the way, the instructions on the website,


01:02:17.440 --> 01:02:19.120
people are watching, there's a bash,


01:02:19.120 --> 01:02:20.440
a PowerShell and a batch version.


01:02:20.440 --> 01:02:23.640
The bash version doesn't have backslash ends or something.


01:02:23.640 --> 01:02:24.800
I don't know, it's a little weird.


01:02:24.800 --> 01:02:27.400
Just look at the other ones to realize that's three lines.


01:02:27.400 --> 01:02:29.920
(laughing)


01:02:29.920 --> 01:02:30.840
Oops, all right.


01:02:30.840 --> 01:02:35.240
It does have some interesting ideas.


01:02:35.240 --> 01:02:36.680
You talked about the waiting.


01:02:36.680 --> 01:02:39.920
And it says, don't use time.sleep.


01:02:39.920 --> 01:02:42.160
you might be able to get away with async.iodo.sleep,


01:02:42.160 --> 01:02:44.000
but don't use time.sleep.


01:02:44.000 --> 01:02:47.160
Use page.wait for timeout instead,


01:02:47.160 --> 01:02:50.400
which is interesting.


01:02:50.400 --> 01:02:54.920
Apparently, the time.sleep messes


01:02:54.920 --> 01:02:57.000
with its internal asynchronous--


01:02:57.000 --> 01:02:58.080
- Interesting. - Or something.


01:02:58.080 --> 01:03:01.240
So, yeah, I would just, people, be aware of that.


01:03:01.240 --> 01:03:03.440
All right, let's talk pytest plugin real quick.


01:03:03.440 --> 01:03:04.280
- Sure, sure.


01:03:04.280 --> 01:03:07.920
- So we could write a pytest test


01:03:07.920 --> 01:03:13.820
that takes a page object, which the browser process has


01:03:13.820 --> 01:03:17.760
launched, a session is created, and a page has been created,


01:03:17.760 --> 01:03:19.360
and then it's handed to you.


01:03:19.360 --> 01:03:19.860
- Exactly.


01:03:19.860 --> 01:03:23.300
So like that opening code snippet we just talked about,


01:03:23.300 --> 01:03:25.420
you don't need to do that when you're doing pytest


01:03:25.420 --> 01:03:26.120
with the plugin.


01:03:26.120 --> 01:03:28.320
You basically say, I want to use a page.


01:03:28.320 --> 01:03:29.180
Fixture, go.


01:03:29.180 --> 01:03:31.600
Boom, and it gives it to you.


01:03:31.600 --> 01:03:35.020
So you can immediately jump into things like page go to,


01:03:35.020 --> 01:03:38.020
page locator, give me this, page title, page click,


01:03:38.020 --> 01:03:41.660
you know, straight from the test function,


01:03:41.660 --> 01:03:43.340
which is really, really nice.


01:03:43.340 --> 01:03:45.340
It cuts down on all the boilerplate.


01:03:45.340 --> 01:03:46.580
- Yeah, that's very neat.


01:03:46.580 --> 01:03:49.060
And then here, right below that,


01:03:49.060 --> 01:03:53.660
it shows the CLI options like pytest dash dash headed,


01:03:53.660 --> 01:03:57.180
dash dash browser Firefox or multiple browsers and so on.


01:03:57.180 --> 01:04:01.440
Very nice, very nice.


01:04:03.020 --> 01:04:05.100
- Yeah, what else should we talk about?


01:04:05.100 --> 01:04:09.660
Maybe we could talk, like text input and stuff,


01:04:09.660 --> 01:04:10.980
just really quick, because I feel like


01:04:10.980 --> 01:04:13.940
that goes a little bit beyond just CSS selectors,


01:04:13.940 --> 01:04:17.260
like the clicks and the inputs and the so on.


01:04:17.260 --> 01:04:19.100
So which one do you wanna talk about?


01:04:19.100 --> 01:04:20.940
Inputs, locators, events?


01:04:20.940 --> 01:04:24.300
- There should be a section on selectors if you go down.


01:04:24.300 --> 01:04:25.660
Which I would recommend.


01:04:25.660 --> 01:04:26.820
- All right, quick guide.


01:04:26.820 --> 01:04:30.740
- Selectors are the starting point


01:04:30.740 --> 01:04:33.580
of finding things on a page.


01:04:33.580 --> 01:04:36.580
Because you can identify elements on the page


01:04:36.580 --> 01:04:38.980
from many different kinds of selectors.


01:04:38.980 --> 01:04:40.620
You can have an ID--


01:04:40.620 --> 01:04:42.900
boom, you nailed it--


01:04:42.900 --> 01:04:44.900
assuming it's unique on the page.


01:04:44.900 --> 01:04:46.980
You can use a CSS selector.


01:04:46.980 --> 01:04:48.940
You can use an XPath.


01:04:48.940 --> 01:04:51.140
All those are things that are also


01:04:51.140 --> 01:04:55.100
selectors available with Selenium WebDriver and Cypress.


01:04:55.100 --> 01:04:57.540
But Playwright has a few other kinds of selectors


01:04:57.540 --> 01:04:58.580
that it supports.


01:04:58.580 --> 01:05:00.160
One of the most helpful ones is what


01:05:00.160 --> 01:05:01.560
they call a text selector.


01:05:01.560 --> 01:05:03.020
Oh, you've got it on the screen here.


01:05:03.020 --> 01:05:04.520
- Yeah, there you go.


01:05:04.520 --> 01:05:07.480
I want the button that says login.


01:05:07.480 --> 01:05:09.080
- Correct, exactly.


01:05:09.080 --> 01:05:12.200
Because I don't care what kind of element it is,


01:05:12.200 --> 01:05:15.960
I just want the element that has a text that says login,


01:05:15.960 --> 01:05:17.320
that has submit.


01:05:17.320 --> 01:05:18.800
And as long as it's the only one on the page,


01:05:18.800 --> 01:05:20.120
you're gonna get it right.


01:05:20.120 --> 01:05:24.320
And so that lends to the developer experience, right?


01:05:24.320 --> 01:05:28.120
'Cause you trying to figure out CSS selectors and XPaths


01:05:28.120 --> 01:05:29.400
there's a cognitive load.


01:05:29.400 --> 01:05:31.580
Sometimes you have to do it, but if you don't have to


01:05:31.580 --> 01:05:32.740
and you can do something easier,


01:05:32.740 --> 01:05:34.780
it's better for you and for the testing.


01:05:34.780 --> 01:05:36.700
Simple is better than complex.


01:05:36.700 --> 01:05:38.820
And so here, right, yeah, give me the text,


01:05:38.820 --> 01:05:40.220
boom, I'll find the element.


01:05:40.220 --> 01:05:45.580
So yeah, so that's one of the really cool selectors.


01:05:45.580 --> 01:05:46.580
- Yeah, that's fantastic.


01:05:46.580 --> 01:05:49.020
And then you can come in here for input and like,


01:05:49.020 --> 01:05:54.000
go and say, I would like to check the checkbox


01:05:54.000 --> 01:05:58.220
that has the ID agree, or that has the text XL.


01:05:58.220 --> 01:05:59.520
Like, what size of t-shirt do you want?


01:05:59.520 --> 01:06:00.260
I want XL.


01:06:00.260 --> 01:06:04.300
Check that, that radio button or that checkbox.


01:06:04.300 --> 01:06:05.700
That's super cool.


01:06:05.700 --> 01:06:06.220
>>Yep.


01:06:06.220 --> 01:06:10.020
Actually, I should comment that the commands we're seeing here,


01:06:10.020 --> 01:06:13.900
things like page check, page uncheck, page fill,


01:06:13.900 --> 01:06:16.020
that's actually no longer the recommended practice


01:06:16.020 --> 01:06:16.860
with Playwright.


01:06:16.860 --> 01:06:18.700
>>Okay, what do they suggest?


01:06:18.700 --> 01:06:22.940
>>What they suggest is page.locator pop in your selector


01:06:22.940 --> 01:06:25.540
and then dot whatever the interaction is.


01:06:25.540 --> 01:06:27.740
So in these cases, instead of page.check,


01:06:27.740 --> 01:06:31.820
agree, it'll be page locator agree dot check.


01:06:31.820 --> 01:06:34.100
And the reason they recommend that,


01:06:34.100 --> 01:06:36.500
even though it's more verbose, it's


01:06:36.500 --> 01:06:38.840
ultimately supposed to lead you to a refactoring


01:06:38.840 --> 01:06:40.860
into things like page objects.


01:06:40.860 --> 01:06:43.760
Because you are separating the concern of page structure


01:06:43.760 --> 01:06:45.660
from interaction.


01:06:45.660 --> 01:06:48.660
Whereas when they're together, even though it's more concise,


01:06:48.660 --> 01:06:51.900
it is readable, you're combining those concerns.


01:06:51.900 --> 01:06:55.540
It doesn't really matter.


01:06:55.540 --> 01:06:56.460
You can use both ways.


01:06:56.460 --> 01:06:57.700
(laughing)


01:06:57.700 --> 01:06:59.220
- Sure, okay.


01:06:59.220 --> 01:07:00.340
Yeah, these are nice.


01:07:00.340 --> 01:07:04.340
All right, so really, basically the takeaway,


01:07:04.340 --> 01:07:08.500
like for example, here I can go and find me the button


01:07:08.500 --> 01:07:11.060
that says text submit, and then I can do a hover over it


01:07:11.060 --> 01:07:12.800
and then click, which I think is interesting


01:07:12.800 --> 01:07:15.020
because often it doesn't matter,


01:07:15.020 --> 01:07:16.980
but sometimes if you hover over a thing,


01:07:16.980 --> 01:07:20.660
it exposes different DOM elements


01:07:20.660 --> 01:07:21.660
that when you click on them


01:07:21.660 --> 01:07:23.060
may have a different behavior, right?


01:07:23.060 --> 01:07:25.580
So you have this really fine grained control.


01:07:25.580 --> 01:07:26.780
- Indeed, indeed.


01:07:26.780 --> 01:07:31.460
- We got a few, go, no, go ahead, finish your thought, sorry.


01:07:31.460 --> 01:07:33.540
- Sorry, I was gonna say, like, also in that example


01:07:33.540 --> 01:07:37.920
we just showed, you created the locator object one time,


01:07:37.920 --> 01:07:39.980
and then you perform multiple interactions on it.


01:07:39.980 --> 01:07:42.140
Whereas if you had repeated,


01:07:42.140 --> 01:07:43.620
or if you had combined the calls,


01:07:43.620 --> 01:07:45.380
you would have, under the hood,


01:07:45.380 --> 01:07:47.980
duplicated the creation of the same locator object.


01:07:47.980 --> 01:07:51.660
So there's a sense of simplicity there as well.


01:07:51.660 --> 01:07:53.140
That's all. - Got it.


01:07:53.140 --> 01:07:55.460
All right, let's round out our conversation here,


01:07:55.460 --> 01:07:57.920
just quickly with the tools.


01:07:57.920 --> 01:07:59.320
'Cause I think that these are really nice,


01:07:59.320 --> 01:08:00.580
these visual tools here.


01:08:00.580 --> 01:08:04.040
All right, the first one I pulled up first


01:08:04.040 --> 01:08:06.900
is the Playwright Inspector, and it's kind of like,


01:08:06.900 --> 01:08:09.440
I don't even know how to describe it.


01:08:09.440 --> 01:08:11.940
So it's as if you went through


01:08:11.940 --> 01:08:13.480
and you did a bunch of CSS stuff


01:08:13.480 --> 01:08:17.320
and then Playwright wrote asynchronous Python code


01:08:17.320 --> 01:08:19.600
with the things like page.click and whatnot


01:08:19.600 --> 01:08:23.700
that we discussed, and then you can go and check it out.


01:08:23.700 --> 01:08:28.020
So this is kind of like a playback understanding type


01:08:28.020 --> 01:08:29.060
thing, right?


01:08:29.060 --> 01:08:30.980
How would you characterize this?


01:08:30.980 --> 01:08:34.580
>>So this is like saying, OK, this is what your code did.


01:08:34.580 --> 01:08:36.820
Here's more information on it.


01:08:36.820 --> 01:08:40.580
It's very similar to Chrome DevTools.


01:08:40.580 --> 01:08:44.300
I will caveat to say I have not used this much myself.


01:08:44.300 --> 01:08:46.540
This is also kind of new to me, too.


01:08:46.540 --> 01:08:48.820
Also, on top of that, I should say the Playwright team


01:08:48.820 --> 01:08:51.500
keeps pumping out new awesome stuff all the time.


01:08:51.500 --> 01:08:52.940
So hold on to your butts.


01:08:52.940 --> 01:08:55.320
they just keep making more awesome stuff.


01:08:55.320 --> 01:08:56.500
- Yeah, apparently it has features


01:08:56.500 --> 01:08:58.060
for like debugging selectors,


01:08:58.060 --> 01:09:01.740
for stepping through like one of these playback scripts


01:09:01.740 --> 01:09:03.180
to see how it goes and so on.


01:09:03.180 --> 01:09:08.460
- Yeah, I mean, it's really cool real-time stuff here.


01:09:08.460 --> 01:09:10.140
- Yeah, yeah, this is super neat.


01:09:10.140 --> 01:09:12.380
Okay, another one, the trace viewer.


01:09:12.380 --> 01:09:14.640
This, like I said, looks a little bit,


01:09:14.640 --> 01:09:16.860
it's a little bit like the dev tools of a browser


01:09:16.860 --> 01:09:19.500
if you open up the network tab and then select,


01:09:19.500 --> 01:09:22.980
Show me the response in that view


01:09:22.980 --> 01:09:24.260
for people who are not seeing this,


01:09:24.260 --> 01:09:27.680
but you can go to the playwright.dev site and check it out.


01:09:27.680 --> 01:09:29.380
- That's a good way to describe it.


01:09:29.380 --> 01:09:31.900
And it bundles up so many things.


01:09:31.900 --> 01:09:35.980
I think you can say, oh, I wanna capture the screenshots,


01:09:35.980 --> 01:09:37.140
I wanna capture the video,


01:09:37.140 --> 01:09:40.140
I wanna capture the DOM pages, I want the source.


01:09:40.140 --> 01:09:43.500
And I think it bundles it up all for you in one artifact.


01:09:43.500 --> 01:09:46.140
It's like, you test it down, here you go.


01:09:46.140 --> 01:09:47.580
Have fun looking at it.


01:09:47.580 --> 01:09:49.920
So it's a kind of where you could,


01:09:49.920 --> 01:09:52.240
like when you, let's say you're running this


01:09:52.240 --> 01:09:55.400
in continuous integration, you know, test fail,


01:09:55.400 --> 01:09:57.540
it bundles all this stuff up, saves it for you


01:09:57.540 --> 01:09:59.740
as an artifact and then you can go look at it later


01:09:59.740 --> 01:10:01.020
for the ones that fail.


01:10:01.020 --> 01:10:02.680
You'll be like, oh, so here's all the context


01:10:02.680 --> 01:10:03.600
of what went wrong.


01:10:03.600 --> 01:10:06.920
And you can really get in there and figure out what happened.


01:10:06.920 --> 01:10:09.000
- Yeah, it's fantastic.


01:10:09.000 --> 01:10:10.720
Has all the actions, you click on them,


01:10:10.720 --> 01:10:11.780
it says what was the action?


01:10:11.780 --> 01:10:12.720
What was it like before?


01:10:12.720 --> 01:10:13.720
What was it like after?


01:10:13.720 --> 01:10:14.840
What did the network do?


01:10:14.840 --> 01:10:16.520
Yeah, really good.


01:10:16.520 --> 01:10:18.400
And then test generation, because, hey,


01:10:18.400 --> 01:10:19.600
we don't need to write tests.


01:10:19.600 --> 01:10:21.080
We'll just tell it to go.


01:10:21.080 --> 01:10:22.240
No, I'm just kidding.


01:10:22.240 --> 01:10:22.760
Tell us about this.


01:10:22.760 --> 01:10:23.960
This is pretty cool, though.


01:10:23.960 --> 01:10:25.480
This is like, fire up the browser,


01:10:25.480 --> 01:10:28.800
let me interact with it, and then generate a script


01:10:28.800 --> 01:10:30.280
that I can go from there.


01:10:30.280 --> 01:10:33.880
Yeah, basically, it's like a screen recorder.


01:10:33.880 --> 01:10:37.200
You start the recorder, you navigate through the web page,


01:10:37.200 --> 01:10:40.360
you do your workflow, you stop the recorder, and then pick.


01:10:40.360 --> 01:10:42.200
It turns all of the things that you


01:10:42.200 --> 01:10:44.040
did into a Playwright script.


01:10:44.040 --> 01:10:45.500
Right, instead of recording video,


01:10:45.500 --> 01:10:48.240
- It records asynchronous Python.


01:10:48.240 --> 01:10:49.080
(laughing)


01:10:49.080 --> 01:10:49.900
- Basically.


01:10:49.900 --> 01:10:50.880
- So it's the data generates.


01:10:50.880 --> 01:10:52.840
Now this is really cool and it's super easy.


01:10:52.840 --> 01:10:56.160
The other thing that's worth noting here is they,


01:10:56.160 --> 01:10:58.000
they talk about authenticated state.


01:10:58.000 --> 01:11:00.260
So if you've got to log in and set up some cookies


01:11:00.260 --> 01:11:03.440
and local storage, you know, like even if you've got


01:11:03.440 --> 01:11:06.640
a JavaScript app that needs to read and write stuff


01:11:06.640 --> 01:11:09.420
to local storage, you can sort of save and load that


01:11:09.420 --> 01:11:12.400
from a JavaScript, a JSON file rather.


01:11:12.400 --> 01:11:14.720
- Yep, yep, yeah, so, 'cause that's another thing,


01:11:14.720 --> 01:11:16.220
particularly with test automation,


01:11:16.220 --> 01:11:18.960
how many times do you have to log into your app under test?


01:11:18.960 --> 01:11:22.080
Right, username, password, token, or whatever.


01:11:22.080 --> 01:11:23.620
And so, I mean, you can do this


01:11:23.620 --> 01:11:25.640
with pretty much any browser automation tool.


01:11:25.640 --> 01:11:27.400
This is how Playwright does it.


01:11:27.400 --> 01:11:30.480
You're basically caching that authentication


01:11:30.480 --> 01:11:32.760
so that you can reuse it for different sessions


01:11:32.760 --> 01:11:33.640
or different tests.


01:11:33.640 --> 01:11:36.120
So you don't have to burn that five seconds


01:11:36.120 --> 01:11:37.600
of log in every single time.


01:11:37.600 --> 01:11:40.160
- Sure, if you're not trying to test the login flow,


01:11:40.160 --> 01:11:41.680
it's just in your-- - Correct.


01:11:41.680 --> 01:11:42.520
Correct. - Yeah.


01:11:43.880 --> 01:11:45.600
- Fantastic, I guess debugging tools,


01:11:45.600 --> 01:11:46.600
we can look real quick.


01:11:46.600 --> 01:11:48.400
I mean, I feel like we kind of touched a lot of them.


01:11:48.400 --> 01:11:49.420
Anything else you want to highlight


01:11:49.420 --> 01:11:51.280
maybe running in debug mode?


01:11:51.280 --> 01:11:55.360
- I mean, it's all goodness.


01:11:55.360 --> 01:11:56.920
I would say go read the docs up on it.


01:11:56.920 --> 01:12:00.320
There's more than we can cover in a one hour discussion.


01:12:00.320 --> 01:12:02.960
- Yeah, well, I think we're down to minutes, not hours.


01:12:02.960 --> 01:12:06.680
So we'll maybe leave it there.


01:12:06.680 --> 01:12:09.520
There's a bunch of guides about like auto weighting,


01:12:09.520 --> 01:12:13.240
testing APIs, browser context, JavaScript events.


01:12:13.240 --> 01:12:15.640
Like there's a lot of stuff to go in here.


01:12:15.640 --> 01:12:18.260
And oh, check it out, even testing video


01:12:18.260 --> 01:12:19.360
or recording videos.


01:12:19.360 --> 01:12:21.640
- Yep.


01:12:21.640 --> 01:12:23.000
- Fantastic.


01:12:23.000 --> 01:12:25.760
- And for folks who want to learn more about Playwright,


01:12:25.760 --> 01:12:29.640
what I can recommend is that I have done a tutorial


01:12:29.640 --> 01:12:32.440
on Playwright in Python.


01:12:32.440 --> 01:12:34.400
It's on my GitHub account.


01:12:34.400 --> 01:12:37.560
It's playwright-python-tutorial.


01:12:37.560 --> 01:12:38.960
I have given this at PyCon.


01:12:38.960 --> 01:12:41.240
I gave this at Python Web Conference.


01:12:41.240 --> 01:12:44.320
I think I gave this at the TAU Homecoming last year.


01:12:44.320 --> 01:12:46.640
And in this repository, what it has,


01:12:46.640 --> 01:12:49.520
it has not only example code, but it has full instructions


01:12:49.520 --> 01:12:51.280
on how you build a test automation


01:12:51.280 --> 01:12:52.760
project with these tools.


01:12:52.760 --> 01:12:55.400
And it walks you through in glorious detail


01:12:55.400 --> 01:12:57.200
all the way through.


01:12:57.200 --> 01:12:59.880
So if this is something you want to get hands on with,


01:12:59.880 --> 01:13:00.800
yep, there it is.


01:13:00.800 --> 01:13:01.840
Boom.


01:13:01.840 --> 01:13:02.640
Give that a try.


01:13:02.640 --> 01:13:03.360
Check it out.


01:13:03.360 --> 01:13:06.000
Follow the instructions in the tutorial folder.


01:13:06.000 --> 01:13:08.160
And let me know if you get stuck.


01:13:08.160 --> 01:13:10.520
>>Yeah, this is really great.


01:13:10.520 --> 01:13:12.840
People can follow along and play with it, right?


01:13:12.840 --> 01:13:13.920
Do a little DuckDuckGo.


01:13:13.920 --> 01:13:15.360
(laughing)


01:13:15.360 --> 01:13:16.520
- Basically.


01:13:16.520 --> 01:13:20.520
- Yeah, but take some other public website like DuckDuckGo


01:13:20.520 --> 01:13:24.240
and figure out how you might go about testing it, right?


01:13:24.240 --> 01:13:25.640
Work your way through of understanding


01:13:25.640 --> 01:13:26.760
what you should do to test it


01:13:26.760 --> 01:13:30.360
and then put that into action with Playwright.


01:13:30.360 --> 01:13:31.200
- Yep, yep.


01:13:31.200 --> 01:13:35.240
- All right, well, I think that pretty much


01:13:35.240 --> 01:13:38.880
is the time we've had to talk about this.


01:13:38.880 --> 01:13:40.340
Anything else you want to quickly touch on


01:13:40.340 --> 01:13:42.440
before we call it a wrap?


01:13:42.440 --> 01:13:44.040
- No, I mean, have fun with it.


01:13:44.040 --> 01:13:45.420
I think Playwright is awesome.


01:13:45.420 --> 01:13:47.580
I really love what the team is doing.


01:13:47.580 --> 01:13:50.220
And yeah, if you ever have,


01:13:50.220 --> 01:13:52.500
if anyone ever has questions on testing automation,


01:13:52.500 --> 01:13:55.040
Playwright, Selenium, you name it,


01:13:55.040 --> 01:13:57.320
hit me up on Twitter, @AutomationPandem.


01:13:57.320 --> 01:13:58.880
- Right on.


01:13:58.880 --> 01:14:00.880
All right, now before we get out of here,


01:14:00.880 --> 01:14:03.420
I gotta ask the final two questions.


01:14:03.420 --> 01:14:05.880
If you're gonna write some Python code,


01:14:05.880 --> 01:14:07.200
what editor do you use?


01:14:07.200 --> 01:14:09.960
Your tutorial may have given it away if people seen that,


01:14:09.960 --> 01:14:10.960
but go ahead.


01:14:10.960 --> 01:14:13.960
- VS Code, that's what I've been doing recently.


01:14:13.960 --> 01:14:15.160
- All right, right on.


01:14:15.160 --> 01:14:18.120
And then notable PyPI package,


01:14:18.120 --> 01:14:19.480
Pip and Saul playwright to one of them,


01:14:19.480 --> 01:14:20.600
but something else you wanna recommend,


01:14:20.600 --> 01:14:22.800
you're like, oh, this is cool, people should know about X.


01:14:22.800 --> 01:14:26.320
- I mean, typically I would say pytest, right?


01:14:26.320 --> 01:14:31.320
But in fact, I just released a package on PyPI during PyCon.


01:14:31.320 --> 01:14:33.080
I got it done before the final--


01:14:33.080 --> 01:14:34.280
- Oh, nice, okay.


01:14:34.280 --> 01:14:35.520
- It's called Screenplay.


01:14:35.520 --> 01:14:39.560
It is a Pythonic implementation of the Screenplay Pattern.


01:14:39.560 --> 01:14:41.160
It's very minimal right now.


01:14:41.160 --> 01:14:42.840
It doesn't even have documentation.


01:14:42.840 --> 01:14:44.840
But if anybody knows about Screenplay Pattern


01:14:44.840 --> 01:14:49.280
and wants to help contribute to that, check out Screenplay.


01:14:49.280 --> 01:14:49.780
>>Hold on.


01:14:49.780 --> 01:14:56.280
>>There it is.


01:14:56.280 --> 01:14:57.160
>>Yeah, all right.


01:14:57.160 --> 01:14:59.560
I'll put that in the show notes.


01:14:59.560 --> 01:15:00.680
Yeah.


01:15:00.680 --> 01:15:01.760
Very cool.


01:15:01.760 --> 01:15:02.880
>>Thank you.


01:15:02.880 --> 01:15:03.360
>>All right.


01:15:03.360 --> 01:15:04.840
Yeah, you bet.


01:15:04.840 --> 01:15:07.040
Well, it's been really great to have you here.


01:15:07.040 --> 01:15:09.640
Thanks for sharing all your experience with Playwright.


01:15:09.640 --> 01:15:10.520
Looks very exciting.


01:15:10.520 --> 01:15:13.520
It looks like something you just want to play with.


01:15:13.520 --> 01:15:14.560
>>Ah, indeed.


01:15:14.560 --> 01:15:16.320
Well, thank you for inviting me to talk.


01:15:16.320 --> 01:15:17.480
I'd love to do it.


01:15:17.480 --> 01:15:18.160
>>Yeah, you bet.


01:15:18.160 --> 01:15:20.480
So people are excited to get started.


01:15:20.480 --> 01:15:23.160
Final call to action, what do you tell them?


01:15:23.160 --> 01:15:25.640
>>People are excited to get started with Playwright,


01:15:25.640 --> 01:15:28.760
check out the website, playwright.dev.


01:15:28.760 --> 01:15:31.080
Check out my tutorial with the link.


01:15:31.080 --> 01:15:33.440
And also, if you ever get stuck, you can reach out to me


01:15:33.440 --> 01:15:35.920
or join the playwrights Slack.


01:15:35.920 --> 01:15:37.580
The folks in there are very helpful


01:15:37.580 --> 01:15:38.880
and very quick to respond.


01:15:38.880 --> 01:15:42.000
- All right, fantastic.


01:15:42.000 --> 01:15:44.040
Well, thanks again for being here.


01:15:44.040 --> 01:15:45.640
It's great to chat with you.


01:15:45.640 --> 01:15:46.600
- Thanks man, appreciate it.


01:15:46.600 --> 01:15:47.600
- Yeah, good bye.

